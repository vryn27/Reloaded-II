{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Reloaded II      Universal, C# based mod framework.          Works with anything X86, X64."},{"location":"#what-is-reloaded-ii","title":"What is Reloaded II","text":"<p>[Reloaded II] is a Swiss army knife universal Game Modding framework.  </p> <p>It is an extensible and modular framework that allows you to create your own mods for any game.  </p>"},{"location":"#mod-loader","title":"Mod Loader","text":"<p> Highly Supported </p> <p>             Can be used in any 32-bit or 64-bit game.             Easy to integrate with other mod loaders.         </p> <p> Modular &amp; Extensible </p> <p>             Minimal core. Does nothing unnecessary.             Extra functionality provided via mods themselves.            </p> <p> Write Mods using .NET </p> <p>             Fast development time with easy to learn C#.             Doesn't mean native mods aren't supported \ud83d\ude09.         </p> <p> Integrated Logging </p> <p>             Logs to console and file in real time.             And perhaps with a universal mod, to the screen too!             </p> <p> High Performance </p> <p>             Reloaded is built for performance.             Modern runtime, low overhead, fast startup times.         </p> <p> Dependency System </p> <p>             Mods can set requirements on other mods.             The loader will ensure they're loaded before your mod.           </p> <p> Early Hook </p> <p>             Your code executes before the game              runs a single line of code.         </p> <p> Hot Reload </p> <p>             Load &amp; Unload supported mods at runtime.             Or even remotely, API available!         </p> <p> Debugging Support </p> <p>             Debug &amp; Profile your code in Visual Studio              Including Edit &amp; Continue Support1.         </p> <p> Mod Conflict Security </p> <p>             Mods are executed in isolation.             Use libraries &amp; NuGet packages without worrying.         </p>"},{"location":"#mod-framework-launcher","title":"Mod Framework &amp; Launcher","text":"<p> Automatic Installer </p> <p>             Install Reloaded &amp; Runtimes with a single click.              Very fast, completes in under 30 seconds.         </p> <p> Automatic Updates </p> <p>             For everything: Launcher, Loader &amp; Mods.             Includes super cool Delta Update technology.         </p> <p> Built-in Mod Configuration </p> <p>             Mods configurable directly from launcher.              Changes apply in real time!         </p> <p> Familiar UI </p> <p>             Including built-in tutorial.             Can be themed and translated to any language.         </p> <p> Multi-Game Launcher </p> <p>             Supports multiple games at once.              Only one copy of Reloaded is needed!         </p> <p> Mod Sets </p> <p>             Save/Load list of mods to be loaded by game.             No need to furiously check and uncheck boxes.         </p> <p> Clean Install/Uninstall </p> <p>             Doesn't modify your game's files.              Self contained. Remove Reloaded folder and it's gone.         </p> <p> Enhanced Download Experience </p> <p>             Built-in mod downloader.             1-click downloads on supported websites.         </p> <p> Portable </p> <p>             Carry your Reloaded with you.              Move your mods to any directory.         </p> <p> Made with LOVE </p> <p>             By yours truly.              Have a great day.         </p>"},{"location":"#platform-support","title":"Platform Support","text":"<p>Info</p> <p>Reloaded is natively a Windows application, however active effort is undertaken to ensure compatibility with Wine. For running Reloaded on Linux, refer to the Linux Setup Guide.</p> Operating System Description Windows \u2705 Native Linux \u2705 Wine (+ Proton) OSX \u26a0\ufe0f Wine (Reportedly works) Other \u2753 Unknown. Architecture Natively Supported x86 \u2705 x86_64 \u2705 Windows on ARM \u2753 Unknown. ARM \u274c"},{"location":"#contributions","title":"Contributions","text":"<p>Contributions to this project are highly encouraged.</p> <p>Feel free to implement new features, make bug fixes or suggestions so long as they are accompanied by an issue with a clear description of the pull request.</p> <p>Documentation is just as welcome as code changes!</p> <ol> <li> <p>You need to set <code>COMPLUS_FORCEENC = 1</code> environment variable.\u00a0\u21a9</p> </li> </ol>"},{"location":"APIOverview/","title":"API Overview","text":"<p>In Reloaded II, in-process communication between mods and the loader as well as Inter Mod Communication (IMC) is performed mainly through the use of extensible interfaces that can be found in the <code>Reloaded.Mod.Interfaces</code> namespace.</p> <p><code>Reloaded.Mod.Interfaces</code> is contained and distributed as a tiny interface only library that contains various interfaces such as <code>IModLoader</code> or <code>IMod</code>. It is included by default in Reloaded mod projects and also available as a NuGet package. </p>"},{"location":"APIOverview/#variants-of-communication","title":"Variants of Communication","text":"<p>This feature (the use of interfaces for communication) is entirely optional. Most mods will probably not need to make use of it - this is for more complex mods. </p> <p>That said, the use of the <code>Reloaded.Mod.Interfaces</code> is compulsory, as it provides the <code>IMod</code> interface used by the mod loader to find an entry point to execute user mods.</p>"},{"location":"APIOverview/#mod-to-loader-communication","title":"Mod to Loader Communication","text":"<p>Mod to loader communication is used to provide various miniature mod loader services such as but not limited to: - Querying the mod loader version. - Writing to the console. - Inter Mod Communication (IMC). - Receiving events on mod load, unload etc.  </p> <p>The communication between the mod and the mod loader is handled by the <code>IModLoader</code> interface. <code>IModLoader</code> interface is immediately available to you in the entry point of your mods, as the <code>IModLoader</code> interface is provided as a parameter of the <code>Start</code> method of the <code>IMod</code> interface.</p>"},{"location":"APIOverview/#mod-to-mod-communication","title":"Mod to Mod Communication","text":"<p>Reloaded's own Mod to Mod communication (Inter Mod Communication) is performed through the use of the aforementioned <code>IModLoader</code> interface that allows for interaction with the mod loader.</p> <p>Reloaded-II provides two mechanisms for what it considers \"Inter Mod Communication\", dubbed \"Plugins and Controllers\".</p> <p>Plugins allow you to extend the functionality of other mods by implementing interfaces defined by them inside your mod. The mod loader API searches, creates and returns new instances of classes implementing a specific interface from other mods. In other words, plugins do not share state.</p> <p>Controllers allow you to directly interact with other loaded mods. Individual mods can submit shared instances of interfaces to the mod loader, which can then be obtained by other mods. Controllers share state.</p> <p>Complete documentation on Mod to Mod communication can be found within the Inter Mod Communication documentation.</p>"},{"location":"APIOverview/#api-upgrades-versioning","title":"API Upgrades &amp; Versioning","text":"<p>Updates to the mod loader API as well as all general interfaces are expected to be very infrequent. Frequency will depend on developer requests however the estimate is less than once a year.</p>"},{"location":"APIOverview/#backwards-compatibility-mod-loader-interfaces","title":"Backwards Compatibility: Mod &amp; Loader Interfaces","text":"<p>As time progresses and new features are added, Reloaded-II needs to preserve compatibility with old mods using older interfaces, how does Reloaded-II plan to achieve this?</p> <p>The answer to this specific question can be summed up with the word <code>inheritance</code>, specifically the inheritance of interfaces.</p> <p>Specifically, Reloaded interfaces used for communication follow a strict set of rules:</p> <ul> <li>All versions of interfaces extend from the previous version.</li> <li>When passing interfaces between boundaries of different isolated units (e.g. Mod to Loader), the first version of the interface is always used.</li> <li>Receivers obtaining the interface promote it by casting to the newest available version known to them.</li> </ul> <pre><code>public static void Start(IModLoaderV1 loader) {\n_loader = (IModLoader)loader;\n// IModLoader is an empty interface that extends from the most recent version, e.g. IModLoaderV3\n// This allows for auto-upgrading interface by updating NuGet package without changing base code.\n}\n</code></pre>"},{"location":"APIOverview/#mod-loader-server","title":"Mod Loader Server","text":"<p>Reloaded-II also supports out-of-process communication through the use of a locally hosted server inside each process which has loaded Reloaded.</p> <p>The data structures, list of server calls and responses of the server can be found in the separate <code>Reloaded.Mod.Loader.Server</code> project. That said, this server is only intended for internal use by the launcher to allow for status reporting and basic mod management.</p>"},{"location":"APIOverview/#backwards-compatibility-mod-loader-server","title":"Backwards Compatibility: Mod Loader Server","text":"<p>Backwards compatibility at server end for requests is handled in the following simple way:</p> <ul> <li>The Server accepts all available requests available in the most recent version of Reloaded-II, regardless of whether it may be always supported.</li> <li>If a given mod-related request is not supported by a mod, the Server will return a <code>ReloadedException</code> with an accompanying error message. Example:<code>\"Feature unavailable. Interface IModV2 is not supported by this mod.\"</code>.</li> </ul>"},{"location":"AddingModFunctionality/","title":"Adding Functionality (Example)","text":"<p>Info</p> <p>The following guide will walk you through adding functionality to a your (non-code) mod through the use of other mods.  </p> <p>In this guide we will be using the universal Reloaded File Redirector Mod to replace files that will be loaded by the game (any game!).  </p>"},{"location":"AddingModFunctionality/#download-the-mod","title":"Download the Mod","text":"<p>First of all, download the mod which we will be using to extend the functionality of our mod. In this case, the <code>Reloaded File Redirector</code>.</p> <p></p>"},{"location":"AddingModFunctionality/#add-dependency-to-other-mod","title":"Add Dependency to Other Mod","text":"<p>In the <code>Edit Mod</code> menu we're going to add <code>Reloaded File Redirector</code> as a dependency.  </p> <p></p> <p>Adding a 'dependency' to your mod will make it such that the other mod will always be loaded when your mod is loaded. This is a necessary step. </p>"},{"location":"AddingModFunctionality/#following-the-guide","title":"Following the Guide","text":"<p>Mods such as <code>File Redirector</code> will typically include guides on using them; which can typically be found on their download page.  </p> <p>Here is the guide for the File Redirector from the GitHub page: </p> <p>We've already done Step A by adding the dependency; let's follow the rest of this guide!</p>"},{"location":"AddingModFunctionality/#opening-the-mod-folder","title":"Opening the Mod Folder","text":"<p>Go to the folder where your mod is stored, this can be done by simply clicking the <code>Open Fodler</code> button.  </p>"},{"location":"AddingModFunctionality/#add-some-files","title":"Add Some Files","text":"<p>Make a folder called <code>Redirector</code>.  Inside it place files that we want to be replaced.  </p> <p></p> <p>The contents of our mod folder now look as follows.</p> <pre><code>// Mod Contents\nModConfig.json\nPreview.png\nRedirector\n\u2514\u2500dvdroot\n  \u251c\u2500advertise\n  \u2502   adv_pl_rouge.one\n  \u2514\u2500playmodel\n      ro.txd\n      ro_dff.one\n</code></pre> <p>The connectors <code>\u2514\u2500</code> represent folders.</p>"},{"location":"AddingModFunctionality/#summary","title":"Summary","text":"<p>That's all folks.</p>"},{"location":"AddingUpdateSupport/","title":"Adding Support (for Programmers)","text":"<p>Note</p> <p>The following guidance is for programmers wishing to add update support to their own websites to Reloaded.  </p> <p>Support for mod updates is provided using the Sewer56/Update library.  </p> <p>Use the following steps to add update support to your website.  </p>"},{"location":"AddingUpdateSupport/#preface","title":"Preface","text":"<p>Please use the namespace <code>Reloaded.Mod.Loader.Update.Providers.YOUR_SERVICE_HERE</code> for your website/service.  </p>"},{"location":"AddingUpdateSupport/#1-write-an-update-resolver","title":"1. Write an Update Resolver","text":"<p>Create a package resolver (<code>IPackageResolver</code>) by following the guidelines at wiki:Update/Package Resolvers.  </p> <p>You can find additional examples in the Update library itself.  </p>"},{"location":"AddingUpdateSupport/#2-write-a-resolver-factory","title":"2. Write a Resolver Factory","text":"<p>Create a class that implements the <code>IUpdateResolverFactory</code> class inside <code>Reloaded.Mod.Loader.Update.Providers</code>, returning your <code>IPackageResolver</code> via <code>GetResolver()</code>. </p> <p>Example: See <code>GameBananaUpdateResolverFactory</code>.</p>"},{"location":"AddingUpdateSupport/#3-register-your-resolver-factory","title":"3. Register your Resolver Factory","text":"<p>When you are done, update <code>ResolverFactory.All</code> to include your new <code>IUpdateResolverFactory</code>.</p>"},{"location":"BuildingReloaded/","title":"Prerequisites","text":"<ul> <li>.NET 6.0 SDK (or newer).</li> <li>Visual Studio 2019+<ul> <li>\"Desktop development with C++\" workload (Windows 10 SDK)</li> </ul> </li> </ul>"},{"location":"BuildingReloaded/#obtaining-reloaded","title":"Obtaining Reloaded","text":"<ul> <li>Clone this repository and fetch the submodules.</li> </ul> <pre><code>git clone https://github.com/Reloaded-Project/Reloaded-II\ncd Reloaded-II\ngit submodule update --init --recursive\n</code></pre>"},{"location":"BuildingReloaded/#building-reloaded","title":"Building Reloaded","text":"<ul> <li>Open 'Source/Reloaded-II.sln' in Visual Studio.</li> <li>Build.</li> </ul> <p>You're done (* ^ \u03c9 ^), go play around!</p>"},{"location":"BuildingReloaded/#releasing-reloaded","title":"Releasing Reloaded","text":"<p>To distribute Reloaded, build it using the publish script <code>Publish.ps1</code>.</p> <ol> <li>Search for and open <code>Developer Command Prompt for VS 2019</code>.</li> <li>Change current directory to the <code>Source</code> directory.</li> <li>Open Powershell by typing in <code>powershell</code>.</li> <li>Execute <code>.\\Publish.ps1</code>.</li> </ol> <p>The output should reside in the <code>Publish</code> folder.</p>"},{"location":"ContributingLocally/","title":"Contributing to the Wiki: Locally","text":""},{"location":"ContributingLocally/#tutorial","title":"Tutorial","text":"<p>You should learn the basics of <code>git</code>, an easy way is to give GitHub Desktop (Tutorial) a go. It's only 15 minutes \ud83d\ude00.</p> <ol> <li>Create a GitHub account.</li> <li> <p>Fork this repository:</p> <p></p> <p>This will create a copy of the repository on your own user account, which you will be able to edit.</p> </li> <li> <p>Clone this repository.</p> <p>For example, using GitHub Desktop: </p> </li> <li> <p>Make changes inside the <code>docs</code> folder.</p> <p></p> <p>Consider using a Markdown Cheat Sheet if you are new to markdown.</p> <p>I recommend using a markdown editor such as <code>Typora</code>. Personally I use Visual Studio Code, which has built-in markdown support and preview available (<code>Ctrl+Shift+P</code> -&gt; <code>Markdown: Open Preview</code>). </p> </li> <li> <p>Commit the changes and push to GitHub.</p> </li> <li> <p>Open a <code>Pull Request</code>.</p> <p></p> <p>Opening a <code>Pull Request</code> will allow us to review your changes before adding them with the main official page. If everything's good, we'll hit the merge button and add your changes to the official repository.</p> </li> </ol>"},{"location":"ContributingLocally/#website-live-preview","title":"Website Live Preview","text":"<p>If you are working on the wiki locally, you can generate a live preview the full website. Here's a quick guide of how you could do it from your <code>command prompt</code> (cmd).</p> <ol> <li> <p>Install Python 3</p> <p>If you have <code>winget</code> installed, or Windows 11, you can do this from the command prompt. <pre><code>winget install Python.Python.3\n</code></pre></p> <p>Otherwise download Python 3 from the official website.</p> </li> <li> <p>Install Material for MkDocs and Plugins (Python package)     <pre><code># Restart your command prompt before running this command.\npip install mkdocs-material\npip install mkdocs-redirects\n</code></pre></p> </li> <li> <p>Open a command prompt in the folder containing <code>mkdocs.yml</code>. and run the site locally.     <pre><code># Move to project folder.\ncd &lt;Replace this with full path to folder containing `mkdocs.yml`&gt;\nmkdocs serve\n</code></pre></p> <p></p> <p>Copy the address to your web browser and enjoy the live preview; any changes you save will be shown instantly.</p> </li> </ol>"},{"location":"ContributingOnline/","title":"Contributing to the Wiki: Online","text":"<p>(If you want to work purely in your web browser, recommended for small changes only)</p> <ol> <li>Create a GitHub Account.</li> <li> <p>Fork this repository:</p> <p></p> <p>This will create a copy of the repository on your own user account, which you will be able to edit.</p> </li> <li> <p>Open the <code>docs</code> folder and edit the relevant (.md) pages.</p> <p></p> <p>Consider using a Markdown Cheat Sheet for your editing needs.</p> </li> <li> <p>Open a <code>Pull Request</code>.</p> <p></p> <p>Opening a <code>Pull Request</code> will allow us to review your changes before adding them with the main official page. If everything's good, we'll hit the merge button and add your changes to the official repository.</p> </li> </ol>"},{"location":"CreatingModPacks/","title":"Creating Mod Packs","text":"<p>For information on installing mod packs, please see Installing Mod Packs.</p>"},{"location":"CreatingModPacks/#1-open-editor","title":"1. Open Editor","text":"<p>Info</p> <p>You can find the mod pack editor in the (three gears) <code>Manage Mods</code> menu.  </p> <p></p> <p>When opened, a blank pack editor would appear on the screen.  </p> <p></p> <p>Click on the top left where it says (<code>Click to Edit</code>) to edit the mod pack's welcome screen.</p>"},{"location":"CreatingModPacks/#2-add-a-description","title":"2. Add A Description","text":"<p>About Markdown</p> <p>Reloaded uses Markdown (tutorial) for mod pack descriptions.  </p> <p>If you ever use italics and bolds in your Discord/Reddit posts, you're probably familiar with a small bit of Markdown. Markdown files use the file extension <code>.md</code> and can be saved/opened with any text editor.  </p> <p>Tip</p> <p>Markdown editors such as Dilinger and Typora allow you to preview your formatted text in real time.  </p> <p></p> <p>To add a description to your mod, click <code>Set Description</code> and select a markdown file. To add an image, click <code>Add Image</code>. Clicking <code>Remove Image</code> will remove currently shown image.</p>"},{"location":"CreatingModPacks/#3-adding-mods","title":"3. Adding Mods","text":"<p>In order to add a mod to the pack, press the <code>Add Mod</code> button and select a mod from the list. If possible (i.e. mod author includes those), the pack creator will automatically add the description and images for you.  </p> <p>Info</p> <p>The <code>.r2pack</code> files do not contain the mods themselves, only images and text. The mods are only downloaded once user selects their mods and begins the download process.</p> <p>Mods must have working update support. The <code>Add Mod</code> dialog will not show mods that don't have update support enabled.</p> <p>To select a mod for editing, click the mod title from the list below the title/main section of the pack. If you want to remove a mod, open that mod's page and click <code>Remove Mod</code>.</p>"},{"location":"CreatingModPacks/#4-testing-packs","title":"4. Testing Packs","text":"<p>When you are happy with the changes you made, you can click <code>Test Pack</code>.  </p> <p></p> <p>Selecting this option will display the pack install screen, as seen by the end user.  </p> <p>When you are happy with your result, press <code>Save Pack</code>.  </p>"},{"location":"CreatingMods/","title":"Creating Mods","text":"<p>Note</p> <p>This section is for non-programmers wishing to create mods which take advantage of existing mods/plugins (such as file redirection). If you intend on programming with Reloaded, please see Programmers' Getting Started instead.  </p>"},{"location":"CreatingMods/#create-a-configuration-file","title":"Create A Configuration File","text":"<p>The first step towards creating a mod is to make a configuration file. This can be simply done by entering the <code>Manage Mods</code> (3 gears) menu and clicking the <code>New</code> button.</p> <p></p> <p></p> <p>For the Mod Id you should enter a name that is unique to your mod.  </p> <p>The format <code>game.type.name</code> is suggested, for example <code>sonicheroes.asset.seasidehillmidnight</code>.  </p> <p>This name should be human readable.  </p>"},{"location":"CreatingMods/#edit-the-mod-configuration","title":"Edit the Mod Configuration","text":"<p>Note</p> <p>You can access this menu in the future by selecting the mod and clicking <code>Edit</code> in the Manage Mods menu, or by right clicking the mod in any game's mod list.</p>"},{"location":"CreatingMods/#main-mod-details","title":"Main Mod Details","text":"<p>Set the following mod properties. - <code>Name:</code> The name of the mod a seen in the launcher. - <code>Author:</code> The name of the author(s) of the mod. - <code>Version:</code> The version of the mod. - <code>Description:</code> Short summary of the mod.  </p> <p>For the <code>Version</code> field, Reloaded uses Semantic Versioning.  </p> <p>In simple terms, please use the <code>X.Y.Z</code> format for your versions and increment: - <code>X</code> when you make big/breaking changes that fundamentally change your mod. (Example: Major game rebalance) - <code>Y</code> when you add new features without breaking existing functionality. (Example: Add stage to stage pack) - <code>Z</code> when you add new bug fixes. (Example: Fixed bad texture)  </p>"},{"location":"CreatingMods/#update-the-preview-image","title":"Update the Preview Image","text":"<p>To set the preview image, click on the image above the <code>Name</code> field.  </p> <p></p> <p>Although any resolution is accepted, it is recommended that your preview image is  <code>256x256</code> in size (or a multiple like <code>512x512</code>). This is the size it will be displayed at to most users.  </p>"},{"location":"CreatingMods/#add-game-support-to-mod","title":"Add Game Support to Mod","text":"<p>Select the game(s) you wish to support from the dropdown menu.  </p> <p></p> <p>This will make it so that your mod will be visible in that specific game's mod list.</p>"},{"location":"CreatingMods/#summary","title":"Summary","text":"<p>By the end of this guide, you should have a newly created mod, which will be visible in your game's mods list.  </p> <p></p> <p>Next: Adding Mod Functionality </p>"},{"location":"CreatingRelease/","title":"Uploading Mods","text":"<p>Tip</p> <p>Before creating a Release, it is recommended you Enable Update Support for your mod,  even if you don't plan to ship updates. Doing so will allow your mod to be included in Mod Packs (How to Create Them).  </p> <p>Before uploading a mod, you should first create a <code>Release</code>. A <code>Release</code> consists of 2 files: - Compressed version of your mod. - JSON text file containing update information.  </p>"},{"location":"CreatingRelease/#note-for-code-mods","title":"Note for Code Mods","text":"<p>Info</p> <p>If you're a programmer shipping a code mod with dependencies, do the following at least once: - Build your mod (if needed). - Restart the launcher. - Copy <code>ModConfig.json</code> back from mod folder to your code project.  </p> <p>This is important as Reloaded copies update information from dependencies into your ModConfig, allowing for automatic installation if the end user doesn't have the dependency.  </p> <p>Note</p> <p>GitHub has a low limit of 60 requests/hour per IP for unauthenticated users. This gets exhausted fast. If you're publishing a mod that is likely to be a dependency of another, it's recommended to have an alternative update source if possible.  </p>"},{"location":"CreatingRelease/#create-a-release","title":"Create a Release","text":"<p>In order to create a release for a mod, right click the mod and hit <code>Publish</code> in an individual application's main page.  </p> <p> </p> <p> </p> <p>Select the <code>Publish Target</code> from the dropdown. (Use <code>Default</code> if your website/location is not present in the list.)</p>"},{"location":"CreatingRelease/#add-a-changelog-readme","title":"Add a Changelog &amp; Readme","text":"<p>About Markdown</p> <p>Reloaded uses Markdown (tutorial) for its text documents. If you ever use italics and bolds in your Discord/Reddit posts, you're probably familiar with a small bit of Markdown. Markdown files use the file extension <code>.md</code> and can be saved/opened with any text editor.  </p> <p>Tip</p> <p>Markdown editors such as Dilinger and Typora allow you to preview your formatted text in real time.  </p> <p>You can add changelogs and readme files during the publish step by clicking the <code>Set Readme File</code> and <code>Set Changelog File</code> buttons respectively.  </p> <p> </p> <p>In the selection dialog, select the file (<code>.md</code>) containing the text to be included; e.g. <code>Readme.md</code> for the Readme and <code>Changelog.md</code> for the Changelog.  </p> <p>Note</p> <p>GameBanana Descriptions and Updates are auto-converted to Readme and Changelogs. If your mod page only hosts 1 mod; then it is acceptable to use those instead.  </p>"},{"location":"CreatingRelease/#add-delta-update","title":"Add Delta Update","text":"<p>About Delta Updates</p> <p>Reloaded allows for the creation and usage of delta updates. This is a special kind of update that allows the user to only download the code and data that has changed since the last version of your mod.  </p> <p>Example</p> <p>If mod version <code>1.0.1</code> adds 8MB of files, the user will only download 8MB to update from last version (<code>1.0.0</code>), instead of the full mod. </p> <p>To create a delta update, do the following: - Download the previous version of your mod (including <code>.json</code> file!) to an new folder. - Check <code>Automatic Delta</code> in <code>Delta Update</code> tab. - <code>Set Output Folder</code> to the location of the new folder.  </p> <p>Note</p> <p>If you have an unpacked version of your previous mod, i.e. as a raw folder; you can add that in the <code>Delta Update</code> tab manually instead.  </p>"},{"location":"CreatingRelease/#publish-and-upload-your-mod","title":"Publish and Upload Your Mod","text":"<p>When you are done, click <code>Publish</code> and upload all of the <code>.7z</code> and <code>.json</code> files in the folder.  </p>"},{"location":"CreatingRelease/#summary","title":"Summary","text":"<p>By the end of this guide, you should have successfully published your mod.  </p> <p> </p> <p>If uploading to GameBanana (pictured above), a <code>1-Click Install</code> button should show up after 2-5 minutes.  </p> <p>Tip</p> <p>You can make mods directly downloadable with 1 click by prefixing any <code>http(s)</code> link with <code>r2:</code>, e.g. File Monitor 1 Click</p> <p>Additional (Optional) Resources: - Missing 1 Click Install Button on GameBanana - Publishing Mods from Commandline - Publishing Mods to NuGet - How Legacy Mods are Handled </p>"},{"location":"CreatingReleaseExtras/","title":"Extras (Optional)","text":""},{"location":"CreatingReleaseExtras/#publishing-mods-from-commandline","title":"Publishing Mods from Commandline","text":"<p>Note</p> <p>If you are making a code mod, it is recommended to use the Publish script from the Mod Template.  </p> <p>The following instructions are provided for people wishing to make their own build scripts.  </p> <p>Reloaded comes with a set of tools that can be used to create releases outside of the launcher.  </p> <ul> <li><code>Reloaded.Publisher.exe</code> [Recommended]: Publishes a release for a mod. Identical features to GUI's <code>Publish Mod</code> menu.  </li> <li><code>NuGetConverter.exe</code> [Legacy]: Automatically creates a NuGet package given a mod folder or a mod zip.  </li> </ul> <p>You can get them from either of the 2 sources:  </p> <ul> <li>Via GitHub Releases (<code>Tools.zip</code>).  </li> <li>Via Chocolatey.  </li> </ul>"},{"location":"CreatingReleaseExtras/#uploading-to-nuget","title":"Uploading to NuGet","text":"<p>When creating a release, please select the <code>NuGet</code> publish target. This should output a <code>.nupkg</code> file, which you will upload.  </p> <p>The easiest way to upload a package is to install the .NET SDK and use the <code>dotnet</code> commandline utility. </p> <p>Example: <pre><code># Upload package.nupkg to the official Reloaded server.\ndotnet nuget push -s http://packages.sewer56.moe:5000/v3/index.json -k API-KEY package.nupkg\n</code></pre></p> <p>Upload instructions for the official Reloaded package server.  </p>"},{"location":"CreatingReleaseExtras/#missing-1-click-install-on-gamebanana","title":"Missing 1 Click Install on GameBanana","text":"<p>If a <code>One Click Install</code> button does not show up for your uploaded mod after 5 minutes; chances are that <code>1 Click Support</code> for Reloaded II is not enabled for this game. Contact Tom @ GameBanana to ask for the button to be enabled.  </p>"},{"location":"CreatingReleaseExtras/#handling-legacy-mods","title":"Handling Legacy Mods","text":"<p>Info</p> <p>Reloaded tries to make the experience consistent, even with old mods that don't have a <code>.json</code> file with extra info. When possible, Reloaded will try to guess unknown details such as readme, changelog and mod title automatically if they are not available.  </p> <p>Here is an example:  </p> <p></p> <p>The description was automatically copied from GameBanana's description on their site:  </p> <p></p> <p>The mod name is a combination of the page name on GameBanana <code>HD Rings</code> and the description of the file <code>HD Rings</code>, hence <code>HD Rings: HD Rings</code>:  </p> <p></p>"},{"location":"DependencyInjection_Consumer/","title":"How to Consume Dependencies","text":"<p>Note</p> <p>A specific mod load order is not required when consuming dependencies. Reloaded will automatically rearrange load order when required to ensure dependencies are loaded before their consumers without affecting the order of other mods.  </p>"},{"location":"DependencyInjection_Consumer/#set-a-dependency-on-the-other-mod","title":"Set a Dependency on the Other Mod","text":"<p>In your <code>ModConfig.json</code>, update the <code>ModDependencies</code> to include the id of the mod you are consuming.  </p> <pre><code>\"ModDependencies\": [\n\"reloaded.sharedlib.hooks\",\n\"Riders.Controller.Hook\"\n]\n</code></pre>"},{"location":"DependencyInjection_Consumer/#add-other-mods-interfaces-library-to-your-project","title":"Add Other Mod's Interfaces Library to your Project","text":"<p>Every mod that publishes an interface will have something called an <code>Interfaces</code> library, which contains a collection of all the interfaces that the mod publishes.  </p> <p>By convention, this library is usually named <code>&lt;ModId&gt;.Interfaces</code> and comes in the form of a NuGet package, for example: - Reloaded Hooks Shared Lib (NuGet) - Memory SigScan Shared Lib (NuGet) </p>"},{"location":"DependencyInjection_Consumer/#consume-dependencies","title":"Consume Dependencies","text":"<p>Use the <code>IModLoader</code> API to get an instance of the interface you want to consume. This interface should be available at the entry point (<code>Start</code>) of the mod you are consuming.</p> <pre><code>WeakReference&lt;Controller&gt; _controller;\nvoid GetController() {\n_controller = _loader.GetController&lt;IController&gt;();\n}\n</code></pre> <p>\u2705 Always check the controller is valid and hasn't been disposed before usage. <pre><code>void DoSomethingWithController() {\n// If the mod we got IController from is unloaded, `TryGetTarget` will fail.\nif (_controller != null &amp;&amp; _controller.TryGetTarget(out var controller))\n{\n// Do something with `controller`\n}\n}\n</code></pre></p>"},{"location":"DependencyInjection_Consumer/#life-cycle-disposal","title":"Life Cycle &amp; Disposal","text":"<p>Info</p> <p>Some Reloaded mods support real-time loading and unloading. As such, you must be careful with how you consume interfaces from other mods.  </p> <p>Note</p> <p>You can find out if a mod is unloadable by launching your game and clicking the process in the Processes list in Reloaded. If the unload button is not  greyed out, the mod is unloadable.  </p> <p>If the mod is not unloadable, you can ignore this section.  </p> <p>In order to ensure unloading of publishers can correctly happen in the runtime, Reloaded uses \"Weak References\" (<code>WeakReference&lt;T&gt;</code>). Here is guidance on how to use them:  </p> <p>\u2705 Storing Weak References on the Heap is OK <pre><code>WeakReference&lt;IController&gt; _reference;\nvoid AcquireController() {\n_reference = _loader.GetController&lt;IController&gt;();\n}\n</code></pre></p> <p>\u2705 Storing referenced objects on the Stack is OK <pre><code>void AcquireController() {\nIController controller = _loader.GetController&lt;IController&gt;().Target;   // controller is no longer referenced outside of the scope of the method.\n}\n</code></pre></p> <p>\u274c Storing referenced objects on the Heap is NOT OK. <pre><code>IController _controller;\nvoid AcquireController() {\n_controller = _loader.GetController&lt;IController&gt;().Target;\n// This prevents the mod loader from being unable to dispose the controller.\n}\n</code></pre></p>"},{"location":"DependencyInjection_ExtraFeatures/","title":"Extra Features","text":""},{"location":"DependencyInjection_ExtraFeatures/#interface-factories","title":"Interface Factories","text":"<p>Warning</p> <p>This feature has never been battle tested. It's been Reloaded's least used feature since release; no known mod uses this at time of writing.  </p> <p>Reloaded's API also provides a functionality to create all instances implementing a type. You can do this through the <code>MakeInterfaces</code> method.</p> <pre><code>// _loader is an instance of IModLoader\nvar interfaces = _loader.MakeInterfaces&lt;ISharedInterface&gt;();\n</code></pre> <p>When you run the above code, Reloaded will iterate through every loaded mod and create an instance of every class implementing <code>ISharedInterface</code>. The result of this operation (all instances) will be returned as an array.  </p>"},{"location":"DependencyInjection_ExtraFeatures/#optional-dependencies","title":"Optional Dependencies","text":"<p>(<code>OptionalDependencies</code> in <code>ModConfig.json</code>)</p> <p>Mods can also use the <code>OptionalDependencies</code> field instead of the <code>ModDependencies</code> field. Doing so allows you to consume dependencies from the other package, but does not re-order the mod load order or give any warnings to the user.  </p> <p>As such, you should call <code>GetController</code>/<code>MakeInterfaces</code> from the <code>OnModLoaderInitialized</code> event (called when all mods are loaded).</p> <pre><code>IModLoader _loader;\nWeakReference&lt;IController&gt; _controller;\nvoid Start(IModLoaderV1 loader) {\n_loader = (IModLoader)loader;\n_loader.OnModLoaderInitialized += Initialized;\n}\n\n// Called by the mod loader after all mods finished loading.\nvoid Initialized() {\n_controller = _loader.GetController&lt;IController&gt;();\n}\n</code></pre>"},{"location":"DependencyInjection_HowItReallyWork/","title":"How does it Really Work?","text":"<p>Info</p> <p>The following section describes the internal implementation detail of how dependency injection works. It is provided to those that are really interested.</p> <p>Reloaded makes extensive use of AssemblyLoadContext(s) to provide isolation between mods, such that they may use 3rd library plugins and dependencies of their choice without interfering with other mods. This can make it difficult to share state between a mod and the loader, and even more so between individual mods.  </p> <p>Reloaded overcomes this challenge by sharing instances of <code>Assemblies</code> (DLLs), loosening up isolation around shared code. Mods can nominate which <code>Assemblies</code> they wish to share with other mods, and the loader will load them into a shared <code>AssemblyLoadContext</code>. When the mod is loaded, the Mod Loader will then force it use the shared <code>Assembly</code> instances from the shared <code>AssemblyLoadContext</code>.  </p> <p>For publishers its own shared types are automatically shared with itself, for consumers this is determined using the <code>ModDependencies</code> field in <code>ModConfig.json</code>. </p>"},{"location":"DependencyInjection_HowItReallyWork/#how-is-this-arrangement-setup","title":"How is this arrangement Setup?","text":"<p>The whole process for sharing an <code>Assembly</code> looks something like this: </p> <ol> <li> <p>Gathering Dependencies  </p> <ol> <li>Mod Loader loads <code>Redirector</code> (Publisher).  </li> <li>Mod Loader loads all shared Assemblies into Shared <code>AssemblyLoadContext</code> </li> <li>Mod Loader unloads <code>Redirector</code> (Publisher).  </li> </ol> </li> <li> <p>Loading Mods  </p> <ol> <li>Mod Loader loads <code>Redirector</code>, sharing its own <code>Assemblies</code> with itself (from 1.b).  </li> <li>Mod Loader loads <code>RedirectorMonitor</code> (Consumer).  <ol> <li><code>RedirectorMonitor</code> specified <code>Redirector</code> in its <code>ModDependencies</code> field.  </li> <li>Therefore Mod Loader shares all of <code>Redirector</code>'s exports with <code>RedirectorMonitor</code>.  </li> </ol> </li> </ol> </li> <li> <p>Executing Mods  </p> <ol> <li>Mod Loader rearranges mod load order to account for mod dependencies.  </li> <li><code>Redirector</code> code executes. Redirector publishes <code>IRedirectorController</code> (from Reloaded.Mod.Interfaces.IRedirector.dll) to Mod Loader.  </li> <li><code>Monitor</code> code executes. Monitor obtains <code>IRedirectorController</code> from Mod Loader.  </li> </ol> </li> </ol>"},{"location":"DependencyInjection_HowItWork/","title":"Introduction","text":"<p>Sometimes you might want to check the state of another mod, run some code from it and/or instruct another mod to perform a certain action. Reloaded-II provides a mechanism to do this.  </p>"},{"location":"DependencyInjection_HowItWork/#how-does-it-work","title":"How Does it Work?","text":"<p>Implemented using interfaces, the concept is that the mod loader acts as a middleman between mods (it's a DI container!). This middleman allows mods to communicate by passing implementations of interfaces between each other.  </p> <p>This may be illustrated by the following diagram:  </p> <p></p> <p>An example of an external mod communicating with the Universal File Redirector. </p> <ul> <li>During initialization, Mod A (Redirector) publishes an interface to the Mod Loader.  </li> <li>During initialization, Mod B (Other Mod) asks the Mod Loader for the interface.  </li> </ul> <p>Communication with the Mod Loader is performed using the <code>IModLoader</code> interface, available at your mod's entry point.  </p>"},{"location":"DependencyInjection_Publisher/","title":"How to Publish Dependencies","text":"<p>Publishing dependencies in Reloaded is done through something called <code>Interfaces</code> libraries. Interfaces libraries are simply libraries that contain a collection of all interfaces a mod wants to make public.  </p>"},{"location":"DependencyInjection_Publisher/#create-an-interfaces-library","title":"Create an Interfaces Library","text":"<p>Create a separate <code>Class Library</code> project in your solution named, <code>&lt;YOUR_MOD_ID&gt;.Interfaces</code> (by convention).  </p> <p>Add a <code>Project Reference</code> from to this new library in your main mod.  </p> <p>Your <code>Solution Explorer</code> (or equivalent) should look something like this: </p>"},{"location":"DependencyInjection_Publisher/#create-a-nuget-package","title":"Create a NuGet Package","text":"<p>Info</p> <p>Please note, that once you upload a package to NuGet.org, you cannot delete it, only hide it from search results.  </p> <p>To make your interfaces library more accessible, it is preferable to make it a NuGet package and publish it to NuGet.org.  </p> <p>To do so, add and fill the following lines to your interface project's <code>.csproj</code> file (inside the first <code>PropertyGroup</code>):  </p> <pre><code>&lt;!-- Create NuGet Package and include your Documentation/comments inside. --&gt;\n&lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;\n&lt;GeneratePackageOnBuild&gt;True&lt;/GeneratePackageOnBuild&gt;\n\n&lt;!-- Set to the same as your project name/namespace --&gt;\n&lt;PackageId&gt;Your.Namespace.Here.Interfaces&lt;/PackageId&gt;\n\n&lt;!-- Use Semantic Versioning --&gt;\n&lt;Version&gt;1.0.0&lt;/Version&gt;\n&lt;Authors&gt;YourNameHere&lt;/Authors&gt;\n\n&lt;!-- Description of your Package --&gt;\n&lt;Description&gt;Description of your mod.&lt;/Description&gt;\n\n&lt;!-- Link to your Source Code [GitHub Page, etc.] --&gt;\n&lt;PackageProjectUrl&gt;&lt;/PackageProjectUrl&gt;\n&lt;RepositoryUrl&gt;&lt;/RepositoryUrl&gt;\n\n&lt;!-- URL to the icon seen for your package in NuGet Search --&gt;\n&lt;PackageIconUrl&gt;https://avatars1.githubusercontent.com/u/45473408&lt;/PackageIconUrl&gt;\n\n&lt;!-- SPDX License Identifier: https://spdx.org/licenses/ --&gt;\n&lt;PackageLicenseExpression&gt;LGPL-3.0-or-later&lt;/PackageLicenseExpression&gt;\n&lt;PackageRequireLicenseAcceptance&gt;True&lt;/PackageRequireLicenseAcceptance&gt;\n</code></pre> <p>Then build the project in <code>Release</code> mode. When you build the interfaces project, you should now see an accompanying <code>.nupkg</code> file in the <code>bin</code> folder. You can then upload this file to NuGet.org.  </p> <p>Note</p> <p>If you are using an IDE like Visual Studio, you'll most likely be able to edit these properties from a <code>Properties</code> / <code>Project Settings</code> window.</p>"},{"location":"DependencyInjection_Publisher/#create-interfaces","title":"Create Interfaces","text":"<p>Create the interfaces for each of the public APIs that you wish to expose to other mods.  </p> <p>A quick way to do this (in many IDEs) is to hover your text cursor over a class name and apply the <code>Extract Interface</code> Quick Fix/option.  </p> <p></p> <p>An example interface:  </p> <pre><code>/// &lt;summary&gt;\n/// Represents an individual scanner that can be used to scan for byte patterns.\n/// &lt;/summary&gt;\npublic interface IScanner : IDisposable\n{\n/// &lt;summary&gt;\n/// Attempts to find a given pattern inside the memory region this class was created with.\n/// The method used depends on the available hardware; will use vectorized instructions if available.\n/// &lt;/summary&gt;\n/// &lt;param name=\"pattern\"&gt;\n///     The pattern to look for inside the given region.\n///     Example: \"11 22 33 ?? 55\".\n///     Key: ?? represents a byte that should be ignored, anything else if a hex byte. i.e. 11 represents 0x11, 1F represents 0x1F\n/// &lt;/param&gt;\n/// &lt;returns&gt;A result indicating an offset (if found) of the pattern.&lt;/returns&gt;\nPatternScanResult FindPattern(string pattern);\n}\n</code></pre> <p>Danger</p> <p>Your interfaces library SHOULD NOT contain any external references/NuGet packages/3rd party libraries. You risk breaking others' mods if they end up using the same libraries.  </p>"},{"location":"DependencyInjection_Publisher/#publish-the-interfaces-library","title":"Publish the Interfaces Library","text":"<p>All that's left is for you to publish the interfaces library. To do this, two steps are required.  </p>"},{"location":"DependencyInjection_Publisher/#export-the-interfaces","title":"Export the Interfaces","text":"<p>Create a class which inherits from <code>IExports</code>. In <code>GetTypes</code>, return an array of interfaces to be consumed by other mods.  </p> <pre><code>public class Exports : IExports {\n// Sharing a type actually exports the whole library.  \n// So you only really need to share 1 type to export your whole interfaces library.  \npublic Type[] GetTypes() =&gt; new[] { typeof(IController) };\n}\n</code></pre>"},{"location":"DependencyInjection_Publisher/#share-it-with-mod-loader","title":"Share it with Mod Loader","text":"<p>During initialization (<code>Mod.cs</code>), register your interface with the Mod Loader using the <code>IModLoader</code> instance.  </p> <pre><code>void PublishInterface() {\nvar _controller = new Controller(); // Implements IController\n_loader.AddOrReplaceController&lt;IController&gt;(this, _controller);\n}\n</code></pre>"},{"location":"DependencyInjection_Publisher/#disposing-publisher","title":"Disposing (Publisher)","text":"<p>Reloaded will automatically dispose your dependencies when your mod is unloaded. You can however, still manually (if desired) dispose/replace your dependency instances with the <code>RemoveController</code> method.  </p> <pre><code>void Unload() {\n_loader.RemoveController&lt;IController&gt;();    }\n</code></pre>"},{"location":"DependencyInjection_Publisher/#upgrading-interfaces","title":"Upgrading Interfaces","text":"<p>Tip</p> <p>This Microsoft Code Analyzer is very highly recommended. When combined with source control, e.g. 'git' it will help you keep track of the APIs your mod exposes.  </p> <p>You are free to ADD anything to your existing interfaces at any time.  </p> <p>However, after you publish an interface, you should NEVER: - Remove any parts of it. - Change any existing parts of it (names, parameters).  </p> <p>Failure to do so will break any mods which use those methods.  </p>"},{"location":"DependencyInjection_Publisher/#examples","title":"Examples","text":"<p>The following mods can be used as examples.  </p> <p>Universal Mods</p> <ul> <li>Reloaded Universal File Redirector<ul> <li>Producer: <code>Reloaded.Universal.Redirector</code></li> <li>Contract: <code>Reloaded.Universal.Redirector.Interfaces</code></li> <li>Consumer(s): <code>Reloaded.Universal.Monitor</code>, <code>Reloaded.Universal.RedirectorMonitor</code></li> </ul> </li> </ul> <p>Application Specific</p> <ul> <li> <p>Sonic Heroes Controller Hook (Allows other mods to receive/send game inputs.)</p> <ul> <li>Producer: <code>Riders.Controller.Hook</code></li> <li>Contract: <code>Riders.Controller.Hook.Interfaces</code></li> <li>Consumer(s): <code>Riders.Controller.Hook.Custom</code>, <code>Riders.Controller.Hook.XInput</code>, <code>Riders.Controller.Hook.PostProcess</code></li> </ul> </li> <li> <p>Sonic Riders Controller Hook (Allows other mods to receive/send game inputs.)</p> <ul> <li>Producer: <code>Heroes.Controller.Hook</code></li> <li>Contract: <code>Heroes.Controller.Hook.Interfaces</code></li> <li>Consumer(s): <code>Heroes.Controller.Hook.Custom</code>, <code>Heroes.Controller.Hook.XInput</code>, <code>Heroes.Controller.Hook.PostProcess</code></li> </ul> </li> </ul> <p>Libraries as Dependencies</p> <ul> <li>PRS Compressor/Decompressor</li> <li>Reloaded.Hooks (Function Hooking/Detour Library)</li> </ul>"},{"location":"DevelopmentEnvironmentSetup/","title":"Development Environment Setup","text":"<p>To start developing mods with Reloaded, you will need the following:</p> <ul> <li>Latest .NET SDK </li> <li>Integrated Development Environment (IDE)  </li> <li>Reloaded Mod Template  </li> </ul> <p>More details below. You should also run <code>Reloaded</code> at least once before starting to develop mods.  </p>"},{"location":"DevelopmentEnvironmentSetup/#net-sdk","title":".NET SDK","text":"<p>To install .NET SDK, do the following: - Visit .NET Download Page. - Download and Install the Latest .NET SDK for your OS.  </p> <p></p> <p>To verify that the SDK is correctly installed, open up a <code>command prompt</code> and run the following command: </p> <pre><code>dotnet --list-sdks\n</code></pre> <p>Assuming the SDK is installed correctly, the command should return at least 1 entry and its location. Example output: </p> <pre><code>6.0.300 [C:\\Program Files\\dotnet\\sdk]\n</code></pre>"},{"location":"DevelopmentEnvironmentSetup/#integrated-development-environment-ide","title":"Integrated Development Environment (IDE)","text":"<p>The most common IDEs and code editors used with .NET include the following:  </p> <ul> <li>Visual Studio Community: Free. The .NET IDE pretty much everyone is familiar with. Windows only.  </li> <li>JetBrains Rider: Paid. Good choice for those familiar with other JetBrains products like IntelliJ and PyCharm. Crossplatform.  </li> <li>Visual Studio Code: Free. Crossplatform, supports .NET via plugins.  </li> </ul>"},{"location":"DevelopmentEnvironmentSetup/#installing-reloaded-mod-template","title":"Installing Reloaded Mod Template","text":"<p>Reloaded provides a template to allow for a quick start with mod development.  </p> <p>To install the template, run the following command: <pre><code>dotnet new -i Reloaded.Mod.Templates\n</code></pre></p> <p>Once installation is complete, you should see a dialog that looks like this upon success:  </p> <pre><code>Template Name             Short Name  Language  Tags\n------------------------  ----------  --------  --------------------\nReloaded II Mod Template  reloaded    [C#]      Common/Library/Games\n</code></pre>"},{"location":"DevelopmentEnvironmentSetup/#summary","title":"Summary","text":"<p>You are now ready to start developing mods with Reloaded. Next: Creating a New Project </p>"},{"location":"EnablingUpdateSupport/","title":"Adding Update Support","text":"<p>Reloaded mods use Semantic Versioning 2.0 as the standard for version names.  Please use the <code>X.Y.Z</code> format for your mod versions, and/or any other format supported by semantic versioning.  </p>"},{"location":"EnablingUpdateSupport/#enabling-update-support","title":"Enabling Update Support","text":"<p>In modern Reloaded, configurations for updates are part of the mod metadata <code>ModConfig.json</code>. These configurations can be easily edited using the <code>Edit Mod Menu</code>. </p> <p></p> <p>You can find this menu in either - <code>Manage Mods</code> -&gt; Highlight Mod -&gt; <code>Edit Mod</code> or - <code>Game</code> -&gt; Right Click Mod -&gt; <code>Edit Mod</code> </p> <p>Hover your mouse over the text boxes for more information. Pre-releases are also supported, but must be explicitly enabled by the user (<code>Edit User Config</code> -&gt; <code>Allow Beta Versions</code>).  </p>"},{"location":"EnablingUpdateSupport/#gamebanana","title":"GameBanana","text":"<p>To support updates from GameBanana, first upload your mod as a private submission </p> <p>Then copy the item ID from the URL of your mod page:  </p> <p>Insert the number from the URL into the <code>ItemID</code> field in the mod configuration, and you are done. If you are publishing the mod from the GUI, please select the <code>GameBanana</code> option in the dropdown.  </p>"},{"location":"EnablingUpdateSupport/#github-releases","title":"GitHub Releases","text":"<p>For GitHub Releases, tags are used to denote the current version of your mod:  </p> <p></p> <p>If the GitHub tag version is higher than the local one, there is an update.  </p> <p>If you wish not to use tags [e.g. you have multiple mods in single GitHub Release], uncheck the <code>UseReleaseTags</code> box.</p>"},{"location":"EnablingUpdateSupport/#nuget","title":"NuGet","text":"<p>For NuGet, you should specify the URL of the NuGet V3 server index where the mod should receive updates from. Any NuGet V3 feed is supported.  </p> <p>Most common feed is the official Reloaded NuGet Package Server <code>http://packages.sewer56.moe:5000/v3/index.json</code> as it preconfigured in Reloaded's Launcher out of the box.</p> <p>To add a server, right click the empty space beside <code>DefaultRepositoryUrls</code> and press <code>Add</code>, then click the newly created textbox to add an URL. </p>"},{"location":"EnablingUpdateSupport/#publishing-multiple-mods","title":"Publishing Multiple Mods","text":"<p>Note</p> <p>This section applies to mods made before June 2022. Mods created using updated template or launcher should need no changes.  </p> <p>In some scenarios you might want to prefer to publish multiple mods to a single GameBanana or GitHub page.  </p> <p>In order to do this, you will need to rename the <code>Release Metadata</code> file in the Edit Mod menu such no 2 mods you will publish to the same page will use the same name.  </p> <p></p>"},{"location":"EnablingUpdateSupport/#summary","title":"Summary","text":"<p>Your mod should be ready for receiving in-launcher updates now.  </p> <p>Next: Creating a Release </p>"},{"location":"ExperimentalFeatures/","title":"Experimental &amp; Miscellaneous Features","text":"<p>This page lists Reloaded features which don't necessarily fit into other pages of the wiki.</p>"},{"location":"ExperimentalFeatures/#experimental-features","title":"Experimental Features","text":"<p>Experimental features are features which are either partially implemented, or which have not yet been thoroughly tested. Use at your own risk.</p>"},{"location":"ExperimentalFeatures/#portable-mode","title":"Portable Mode","text":"<p>Reloaded II can be put into portable mode by creating a file called <code>portable.txt</code> in the same directory as the launcher.  </p> <p>When portable mode is used, Reloaded will always use the <code>Apps</code>, <code>Mods</code>, <code>User</code> and <code>Plugins</code> folders from the launcher's directory.  </p> <p>Other global settings still apply, however.  </p>"},{"location":"ExperimentalFeatures/#relative-pathed-applications","title":"Relative Pathed Applications","text":"<p>It's possible to set a relative <code>AppLocation</code> for programs, as opposed to a fixed path. This will allow you to move the launcher to a subfolder of a game should you plan to only use Reloaded with one game, or ship the launcher preconfigured for a given game.  </p> <p>Example Configuration (<code>Apps/sonicriders.exe/AppConfig.json</code>):  </p> <pre><code>// `Reloaded II/Apps/sonicriders.exe` -&gt; `Sonic Riders/SonicRiders.exe`\n{\n\"AppId\": \"sonicriders.exe\",\n\"AppName\": \"Sonic Riders\",\n\"AppLocation\": \"..\\\\..\\\\..\\\\Sonic Riders\\\\SonicRiders.exe\",\n\"AppArguments\": \"\",\n\"AppIcon\": \"Icon.png\",\n\"AutoInject\": false\n}\n</code></pre> <p>All paths are relative to the folder in which the <code>AppConfig.json</code> file is located.  </p>"},{"location":"ExperimentalFeatures/#miscellaneous-features","title":"Miscellaneous Features","text":""},{"location":"ExperimentalFeatures/#rgb-window-border","title":"RGB Window Border","text":"<p>You can set your window border to hue cycle through the colors of the rainbow. This is a hidden feature that can be used in themes, and is set in <code>Theme/Default/Settings.xaml</code>.  </p> <p>Property name is <code>EnableGlowHueCycle</code>.</p>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":""},{"location":"FAQ/#what-are-the-official-download-links-for-reloaded","title":"What are the official download links for Reloaded?","text":"<p>The official downloads for Reloaded-II are on:</p> <ul> <li>GitHub https://github.com/Reloaded-Project/Reloaded-II/releases</li> <li>GameBanana https://gamebanana.com/tools/6693</li> </ul> <p>Anything else is unofficial.</p> <p>GitHub is always kept up to date while GameBanana is sometimes updated slightly less periodically. Regardless of what you download, the launcher will always offer to update itself to the latest up to date version.</p>"},{"location":"FAQ/#how-do-i-get-started-with-using-reloaded","title":"How do I get started with using Reloaded?","text":"<p>It's as easy as 1,2,3. Take a look at the quick start guide!</p> <p> </p>"},{"location":"FAQ/#how-do-i-report-issues-with-reloaded","title":"How do I report issues with Reloaded?","text":"<p>Please use the following link: https://github.com/Reloaded-Project/Reloaded-II/issues</p>"},{"location":"FAQ/#can-i-use-reloaded-with-steam-overlaycontroller-support","title":"Can I use Reloaded with Steam Overlay/Controller Support?","text":"<p>There are multiple ways to do so, but the two recommended ones are:  </p> <ul> <li>Add Reloaded Shortcut to Steam  </li> <li>Load Reloaded via another code loader (e.g. Ultimate ASI Loader)  </li> </ul> Adding Steam Shortcut (Recommended)Installing ASI Loader (Alternative) <p>Create a shortcut from within the Reloaded Launcher and add it to Steam. </p> <p>Right click the shortcuit and copy the entirety of the <code>--launch \"PathToGame\\Game.exe\"</code> argument within the <code>Target</code> field into Steam's own <code>Launch Options</code> field.  </p> <p>Remember that the <code>--launch</code> argument comes after the path to your Reloaded-II installation, and not to include the preceeding space.  </p> <p></p> <p>In your Mod Selection Menu, click <code>Edit Application</code> and expand the <code>Advanced</code> section. Then simply press the <code>Deploy ASI Loader</code> button and voila!  </p> <p> </p> <p>If you are using Wine, there is an extra step involved.  </p>"},{"location":"FAQ/#my-controller-does-not-work-when-using-reloaded","title":"My controller does not work when using Reloaded","text":"<p>You're probably using an old style controller with a game that only supports Xbox-style (XInput) controllers.</p> <p>Please see issues/38 for more details and workarounds.</p>"},{"location":"FAQ/#can-i-use-reloaded-with-multiplayer-games","title":"Can I use Reloaded with Multiplayer Games?","text":"<p>Please don't, this isn't what Reloaded was built for and you'll most likely get banned if the game has a decent anticheat.</p>"},{"location":"FAQ/#how-do-i-get-started-with-making-mods-for-reloaded","title":"How do I get started with making mods for Reloaded?","text":"<p>Getting started with making mods is very easy, you can in fact do it from inside the launcher itself!</p> <p></p> <p>Follow this guide for an explanation of things. </p> <p>Before you get going, reach out and consult the community for your application! If they are already using Reloaded, they may have some fancy mods, tools, or both!</p>"},{"location":"FAQ/#how-do-i-get-started-with-programming-mods-for-reloaded","title":"How do I get started with programming mods for Reloaded?","text":"<p>As a programmer you should have an adequate level of self sufficiency. As such, please follow the following guide: Building Mods</p> <p></p>"},{"location":"FAQ/#how-can-i-contribute-to-reloaded","title":"How can I contribute to Reloaded?","text":"<p>The easiest way to contribute to Reloaded is to look at the issue list on GitHub.</p> <p>Anything labelled as <code>accepted</code> is up for grabs by anyone, unless assigned to a specific user. Just make sure to follow the coding style in the existing projects and try to write good code.  If the code isn't up to scruff, you might be asked to make changes.</p> <p>Instructions for building Reloaded, and some of the details of its internal workings are also available as part of the documentation</p> <p>Documentation, especially one that benefits the end user is just as valuable as any code.</p>"},{"location":"FAQ/#im-from-a-cc-background-is-there-any-way-we-can-transfer-our-existing-work","title":"I'm from a C/C++ background? Is there any way we can transfer our existing work?","text":"<p>Reloaded CAN load native DLLs, albeit with limited support. For more details please see: Native Mods</p> <p>If your mod was written with an ASI Loader in mind, it should work out of the box. If your existing mod is tied with a specific mod loader (e.g. using some kind of loader API), you will need to find a way to replace this functionality.</p> <p>Please note that config files may be dropped in game directory for mods originally meant for ASI loaders, unless the mod explicitly checks DLL directory; you might need to make minor changes to your mods to account for that.</p> <p>You will still need to generate a mod configuration as per the guide.</p>"},{"location":"InjectionMethods/","title":"Introduction","text":"<p>There are many ways of loading Reloaded into a specific application or process. Four are officially supported, and can be categorized as both Synchronous and Asynchronous with program startup.</p> <p>Synchronous methods are recommended and allow for all of the mods to be initialized before the game or application starts to execute any code.</p> <p>Asynchronous methods meanwhile load mods as the program is executing. That said some complex mods might not function as expected if loaded asynchronously.</p>"},{"location":"InjectionMethods/#manual-launch-synchronous","title":"Manual Launch (Synchronous)","text":"<p>Summary:</p> <ul> <li>Reloaded launches the application in a paused/suspended state.</li> <li>Reloaded is then loaded into the suspended application.</li> <li>The application is resumed.</li> </ul>"},{"location":"InjectionMethods/#auto-injectinject-asynchronous","title":"Auto-Inject/Inject (Asynchronous)","text":"<p>To access this menu, simply click the game instance under the \"other instances\" tab.</p> <p>The \"Inject\" feature simply loads Reloaded into an existing process without having the need to restart it.</p> <p>Auto-inject can be found inside the <code>Add an Application</code> menu, under <code>Advanced Tools &amp; Options</code>. Auto-inject basically automatically injects Reloaded into programs as soon as they are launched.</p>"},{"location":"InjectionMethods/#dll-loader","title":"DLL Loader","text":"<p>Reloaded can be integrated into other ASI/DLL based mod loaders such as Ultimate-ASI-Loader, by copying the bootstrapper. </p> <p>The bootstrapper is just a special DLL that loads .NET Core into an application and then boots Reloaded. There are two bootstrappers, one for 64-bit and one for 32-bit applications, and they can be found under the <code>Loader/X86/Bootstrapper</code> and <code>Loader/X64/Bootstrapper</code> directories respectively.</p> <p></p> <p>Installation will depend on the mod loader, but simply put if you copy the contents of this folder and make a mod loader mod, with <code>Reloaded.Mod.Loader.Bootstrapper.dll</code> as the target DLL (if possible), you can load Reloaded in other loaders.</p>"},{"location":"InjectionMethods/#synchronous-loading","title":"Synchronous Loading","text":"<p>By default, the bootstrapper DLL will load the mods asynchronously, meaning that they will be initialized as the game is normally running.</p> <p>The bootstrapper however does have a feature to allow loading \"synchronously\", by killing the game process and rebooting it. The way it works is that the bootstrapper will silently launch the launcher with a set of commandline arguments which instruct the launcher to re-launch the game, effectively performing the <code>Manual Launch</code> launch method.</p> <p>To enable synchronous loading, simply make an empty file called  <code>ReloadedPortable.txt</code>  in the same directory as the bootstrapper, as seen in the example above.</p> <p>Notes:</p> <ul> <li> <p>The launcher will not add any additional commandline arguments, regardless of what you may have set for the application profile. Commandline arguments set in launcher apply to launching from launcher only.</p> </li> <li> <p>Reloaded can and will only be loaded once, the bootstrapper has a safety mechanism to ensure that.</p> </li> </ul>"},{"location":"InjectionMethods/#integration-examples","title":"Integration Examples","text":""},{"location":"InjectionMethods/#ultimate-asi-loader","title":"Ultimate ASI Loader","text":"<p>With Ultimate ASI Loader, you can place the Bootstrapper in your scripts/plugins directory and rename the bootstrapper DLL with an <code>.asi</code> extension.</p> <p></p> <p>Booting via Ultimate ASI Loader is recommended in games where the embedded Steam DRM \"Steam Stub\" is present (game code is encrypted) as Reloaded II itself does not have a mechanism to handle this DRM. If you are using Ultimate ASI Loader to bypass Steam Stub, you should launch the game using its regular executable as opposed to using the launcher.</p> <p>As of Reloaded II 1.1.0 and above users should not add <code>ReloadedPortable.txt</code>. Reloaded II provides the <code>InitializeASI</code> export, integrating with this loader.</p> <p>NOTE</p> <p>You can install Ultimate ASI Loader to a game from within Reloaded. Please see <code>Edit Application -&gt; Advanced Tools &amp; Options -&gt; Deploy ASI Loader</code> inside the launcher.</p>"},{"location":"InjectionMethods/#sadx-sa2-sonic-r-mania-skc-mod-loader","title":"SADX, SA2, Sonic R, Mania, SKC Mod Loader","text":"<p>Mod.ini <pre><code>Name=Reloaded Mod Loader II\nAuthor=Sewer56\nDLLFile=Reloaded.Mod.Loader.Bootstrapper.dll\n</code></pre></p>"},{"location":"InstallingModPacks/","title":"Installing Mod Packs","text":"<p>Mod packs are a functionality which allows for fast installation of multiple mods at the same time. It is particularly helpful in helping new users get setup fast.  </p> <p>If you wish to know how to create mod packs, please see Creating Mod Packs.</p>"},{"location":"InstallingModPacks/#installing-from-file","title":"Installing From File","text":"<p>Downloaded mod packs use the <code>.r2file</code> extension and can be opened by directly doubleclicking from explorer. </p> <p></p> <p>Once opened, the mod pack will greet you with a welcome screen:  </p> <p></p>"},{"location":"InstallingModPacks/#installing-from-web-browser","title":"Installing From Web Browser","text":"<p>Any download to an <code>.r2pack</code> file can be prefixed with <code>r2pack:</code>.  </p> <p>For example, the link <code>https://website.com/Reloaded.r2pack</code> can be turned into <code>r2pack:https://website.com/Reloaded.r2pack</code>.  </p> <p>When done inside a web browser, a prompt will appear to download and open the file with Reloaded.  </p> <p></p> <p>Note</p> <p>If you have a very slow internet connection, very large packs might take a bit for the window to pop up; as it has to download the whole <code>.r2pack</code> file first, which contains all images.  </p>"},{"location":"InstallingModPacks/#the-complete-experience","title":"The Complete Experience","text":"<p>Info</p> <p>Shows the step by step experience of a typical mod pack installation.</p> <p>First appears the welcome screen:  </p> <p></p> <p>Then you select whether to install (or skip) each individual mod:  </p> <p></p> <p>And confirm which mods you want to download:  </p> <p></p> <p>The mods download while a slideshow is being presented:  </p> <p></p>"},{"location":"InternalLibrariesCommunity/","title":"Community Index Library","text":"<p>Info</p> <p>API for Reloaded II's Community Index which provides compatibility and user suggestions for games. [NuGet Package] </p>"},{"location":"InternalLibrariesCommunity/#index-api","title":"Index API","text":"<p>Info</p> <p>Shows how to fetch data from the community index.  </p> <pre><code>// Can specify optional parameter to fetch index from alternative URL or from filesystem.\n// Get the Index\nvar indexApi  = new IndexApi();\nvar index = await indexApi.GetIndexAsync();\n</code></pre>"},{"location":"InternalLibrariesCommunity/#get-application-in-index","title":"Get Application in Index","text":"<p>Info</p> <p>Shows how to find an application within the index.</p> <pre><code>// exeLocation contains the absolute file path to an EXE.\nawait using var fileStream = new FileStream(exeLocation, FileMode.Open, FileAccess.Read, FileShare.ReadWrite, 524288);\nvar hash = Hashing.ToString(await Hashing.FromStreamAsync(fileStream));\n\n// index variable taken from previous example.\n// appId is the name of the EXE, in lower case, e.g. tsonic_win.exe  [Path.GetFileName(filePath).ToLower()]\nvar applications = index.FindApplication(hash, appId, out bool hashMatches);\n\nif (applications.Count == 1 &amp;&amp; hashMatches)\n{\nif (hashMatches) {\n// Guaranteed match! Get the application info.\nvar application = await indexApi.GetApplicationAsync(applications[0]);\n\n// use TryGetError to validate game data against possible incompatibilities.\n}\nelse {\n// Hash does not match.\n// Either wrong game, or EXE was modified by user.\n// Must be resolved by user.\n}\n}\nelse if (applications.Count &gt; 1) {\n// Multiple matches, must be resolved by user.\n// Rare!\n}\n</code></pre>"},{"location":"InternalLibrariesIO/","title":"I/O Library","text":"<p>Info</p> <p>The I/O library is used for discovery, monitoring changes and parsing of Reloaded-II's configuration files.  </p>"},{"location":"InternalLibrariesIO/#readwrite-loader-configuration","title":"Read/Write Loader Configuration","text":"<p>Info</p> <p>Shows how to read and write to the mod loader configuration.  </p> <p>Read: <pre><code>var config = IConfig&lt;LoaderConfig&gt;.FromPathOrDefault(Paths.LoaderConfigPath);\n</code></pre></p> <p>Write: <pre><code>IConfig&lt;LoaderConfig&gt;.ToPath(config, Paths.LoaderConfigPath);\n</code></pre></p> <p>The <code>IConfig</code> API can be used with all structures inside the <code>Reloaded.Mod.Loader.IO.Config</code> namespace, as such you can also use this API to read app or mod configurations.  </p>"},{"location":"InternalLibrariesIO/#monitor-available-configurations","title":"Monitor Available Configurations","text":"<p>Info</p> <p>Shows how to use create services which keep track of all currently available configurations.  </p> <p>These services actively monitor the FileSystem and update their contents whenever a user deletes a mod, modifies a mod or creates a new mod.  </p> <p>Mods: <pre><code>// Read Loader Config\nvar config = IConfig&lt;LoaderConfig&gt;.FromPathOrDefault(Paths.LoaderConfigPath);\n\n// Monitor Mods\nvar modConfigService = new ModConfigService(config);\n\n// modConfigService.ItemsByFolder | A dictionary of all Folders -&gt; Configurations\n// modConfigService.ItemsByPath | A dictionary of all Config File Paths -&gt; Configurations\n// modConfigService.ItemsById | A dictionary of all ModIds -&gt; Configurations\n</code></pre></p> <p>The following services are also available:  </p> Service Contents ApplicationConfigService All Application/Game Configurations. ModUserConfigService All User Specified Overrides for Mods, e.g. 'Allow Updating to Beta Versions'."},{"location":"InternalLibrariesIO/#batch-read-configurations","title":"Batch Read Configurations","text":"<p>Info</p> <p>Shows how to read multiple configurations at once.  </p> <p>The <code>ConfigReader&lt;T&gt;</code> class can be used for the batch reading of configurations.  </p> <pre><code>// Read all mod configurations.\nvar configs = ConfigReader&lt;ModConfig&gt;.ReadConfigurations(loaderConfig.GetModConfigDirectory(), ModConfig.ConfigFileName, token, 2, 2);\n</code></pre>"},{"location":"InternalLibrariesIO/#useful-utility-methods","title":"Useful Utility Methods","text":"<p>Info</p> <p>This section lists some static commonly used utility methods.  </p> Method Purpose ModConfig.GetAllMods Reads all available mod configurations. ModConfig.SortMods Sorts a list of mods taking into account their individual dependencies. i.e. Ensures that Mod A is loaded before Mod B if Mod B depends on Mod A. ModConfig.GetDependencies Returns a list of all dependencies' mod configurations for a given mod. ModUserConfig.GetAllUserConfigs Retrieves all user configurations that override mod properties. ModUserConfig.GetUserConfigPathForMod Retrieves the path of a user configuration for a given mod. ModUserConfig.GetUserConfigFolderForMod Retrieves the path where mod configuration files are stored. ApplicationConfig.GetAllApplications Retrieves a list of all application configurations. ApplicationConfig.GetAllMods Retrieves a list of all mods for a given application."},{"location":"InternalLibrariesIO/#other-utilities","title":"Other Utilities","text":"<p>A list of other utilities that may be helpful.  </p> Class Purpose Paths Used to get the file paths of various Reloaded components, such as logs and configurations. IOEx Various utility methods for I/O operations. FileSystemWatcherFactory Factory method(s) for creating functions that monitor FileSystem events. NtQueryDirectoryFileSearcher [Windows Only] Very, very fast directory and file searcher. BasicPeParser Basic fast parser for Windows PE files [EXE, DLL] with limited functionality."},{"location":"InternalLibrariesIntro/","title":"Internal Libraries","text":"<p>Warning</p> <p>Some of following libraries are considered 'internal' to Reloaded.  </p> <p>While most are relatively 'stable' in terms of API surface, it is still possible [although unlikely] that some internal implementation details might change; meaning you might need to update your packages from one Reloaded release to another.  </p> <p>The following pages here will provide an 'Introduction' to each library; showing common use cases; they do not document the entire available API.  </p> <p>If you need alternative overloads, etc. consider contributing to Reloaded.  </p> <p>With that in mind, please enjoy.</p>"},{"location":"InternalLibrariesPackaging/","title":"Packaging Library","text":"<p>Info</p> <p>Library for creating downloadable packages and updates for Reloaded II mods. [NuGet Package]</p>"},{"location":"InternalLibrariesPackaging/#create-packages","title":"Create Packages","text":"<p>Info</p> <p>Shows how to create an update package.  </p> <pre><code>// Use the Publisher.PublishAsync API\nawait Publisher.PublishAsync(new PublishArgs()\n{\nModTuple = new PathTuple&lt;ModConfig&gt;(configPath, config),\nOutputFolder = options.OutputFolder,\nIncludeRegexes = options.IncludeRegexes.ToList(),\nIgnoreRegexes = options.IgnoreRegexes.ToList(),\nOlderVersionFolders = options.OlderVersionFolders.ToList(),\nAutomaticDelta = options.AutomaticDelta,\nCompressionLevel = options.CompressionLevel,\nCompressionMethod = options.CompressionMethod,\nProgress = progressBar.AsProgress&lt;double&gt;(),\nPackageName = options.PackageName,\nPublishTarget = options.PublishTarget,\nChangelogPath = options.ChangelogPath,\nMetadataFileName = config.ReleaseMetadataFileName\n});\n</code></pre> <p>The parameters are functionally identical to those in the <code>Reloaded.Publisher</code> CLI tool. Refer to parameters' documentation for definitions.  </p>"},{"location":"InternalLibrariesServer/","title":"Server Library","text":"<p>Info</p> <p>Library for communicating with 'Reloaded II Server' mod (formerly part of mod loader). Allows for remote querying of information as well as mod manipulation (e.g. load/unload mods) in real time. [NuGet Package]</p>"},{"location":"InternalLibrariesServer/#connect-to-server","title":"Connect to Server","text":"<p>Info</p> <p>Connects to the server for remote control.</p> <pre><code>// Create a new client. will automatically asynchronously connect.  \n// Can specify remote IP address, but user must enable 'Allow External Connections' in 'Reloaded II Server' Mod.  \n// ... and port forward\nClient = new LiteNetLibClient(IPAddress.Loopback, \"\", _port, true);\n\n// If the server restarts, e.g. user unloaded and reloaded the mod, \n// you should probably try to get the server's new port number (in case it changed).\nClient.OnTryReconnect += (peer) =&gt; TryGetPort(out _port); // see below how to get new port\nClient.OverrideDetailsOnReconnect += () =&gt; (null, _port); // overrides port in reconnect attempt\n\n// Report back exceptions.\nClient.OnReceiveException += ClientOnReceiveException;\n\n// Useful:\n//  Client.OnConnected | When client connects to host.\n//  Client.IsConnected | If client is connected.\n</code></pre> <p>If the server is hosted on the same machine, you can get the port number programmatically: <pre><code>ServerUtility.GetPort(processId);\n</code></pre></p>"},{"location":"InternalLibrariesServer/#check-if-reloaded-is-present","title":"Check if Reloaded is Present","text":"<p>Info</p> <p>Checks if Reloaded has been loaded into a process with a given ID.</p> <pre><code>ReloadedMappedFile.Exists(processId);\n</code></pre>"},{"location":"InternalLibrariesUpdate/","title":"Update Library","text":"<p>Info</p> <p>Library for resolving dependencies, searching and downloading Reloaded II mod updates. [NuGet Package]</p>"},{"location":"InternalLibrariesUpdate/#check-apply-mod-updates","title":"Check &amp; Apply Mod Updates","text":"<p>Info</p> <p>Checks and applies updates for Reloaded mods.  </p> <pre><code>// modConfigService: See IO Library\n// modUserConfigService: See IO Library\nvar updater       = new Updater(modConfigService, modUserConfigService, updaterData);\nvar updateDetails = await updater.GetUpdateDetailsAsync();\n\nif (updateDetails.HasUpdates())\n{\n// Warning: Consider checking if files are in use.  \n// Otherwise might be stuck waiting for a very long time, there is no timeout.  \nawait Updater.Update(Summary);\n}\n</code></pre> <p>Alternative lower level API: <code>PackageResolverFactory</code>.  </p>"},{"location":"InternalLibrariesUpdate/#search-for-mods","title":"Search for Mods","text":"<p>Info</p> <p>Shows how to search for mods (NuGet, GameBanana, other supported providers).  </p> <pre><code>// May return null if none are available.\n// appConfig represents ApplicationConfig from IO.\nvar aggregateProvider = PackageProviderFactory.GetProvider(appConfig);\n\n// Search for 'Cool Mod' return, 20 entries, skip 0.\nvar results = await aggregateProvider.SearchAsync(\"Cool Mod\", 0, 20);\n</code></pre> <p>To search for NuGet packages, you will need to manually create <code>NuGetPackageProvider</code>:  </p> <pre><code>// loaderConfig is Mod Loader config\nvar nuGetRepository = new AggregateNugetRepository(loaderConfig.NuGetFeeds);\nvar nuGetProvider = new NuGetPackageProvider(nuGetRepository);\n</code></pre> <p>You can use <code>AggregatePackageProvider</code> to combine multiple providers:  </p> <pre><code>// Extract from existing provider.\nvar provider = new AggregatePackageProvider(new IDownloadablePackageProvider[] { nuGetProvider, aggregateProvider }, \"NuGet\");\n</code></pre>"},{"location":"InternalLibrariesUpdate/#resolve-missing-dependencies-for-mod","title":"Resolve Missing Dependencies For Mod","text":"<p>Info</p> <p>Shows how to check and download missing dependencies for mods.</p> <p>Download dependencies for a mod: <pre><code>// nuGetRepository is AggregateNugetRepository\n// mod is ModConfig\nvar resolver = DependencyResolverFactory.GetInstance(nuGetRepository);\nvar result = await resolver.ResolveAsync(mod.ModId, mod.PluginData);\n</code></pre></p> <p>For multiple mods: <pre><code>// The loop is used to resolve nested dependencies (dependencies of dependencies).  \n// Non-NuGet sources usually do not have the ability to resolve those.  \nModDependencyResolveResult resolveResult = null!;\n\ndo\n{\nvar missingDeps = modConfigService.GetMissingDependencies();\nvar resolver = DependencyResolverFactory.GetInstance(nuGetRepository);\n\nvar results = new List&lt;Task&lt;ModDependencyResolveResult&gt;&gt;();\nforeach (var dependencyItem in missingDeps.Items)\nforeach (var dependency in dependencyItem.Dependencies)\nresults.Add(resolver.ResolveAsync(dependency, dependencyItem.Mod.PluginData, token));\n\nawait Task.WhenAll(results); // wait for completion\nresolveResult = ModDependencyResolveResult.Combine(results.Select(x =&gt; x.Result)); // merge results\n\n// Download dependencies here using resolveResult.FoundDependencies\n// so on next loop, will find less dependencies.\n} while (resolveResult.FoundDependencies.Count &gt; 0);\n</code></pre></p>"},{"location":"InternalLibrariesUpdate/#write-dependency-metadata","title":"Write Dependency Metadata","text":"<p>Info</p> <p>Modifies mod configurations to insert data required for resolving dependencies.  </p> <p>e.g. If Mod A depends on Mod B, which receives updates from GitHub, Mod A's config will be modified to include Mod B's update configuration. This will allow people to download Mod B if they have Mod A.  </p> <pre><code>// modConfigService is ModConfigService\nawait DependencyMetadataWriterFactory.ExecuteAllAsync(modConfigService);\n</code></pre>"},{"location":"InternalLibrariesUpdate/#check-reloaded-dependencies","title":"Check Reloaded Dependencies","text":"<p>Info</p> <p>Shows how to check if all runtimes required to run Reloaded are available.  </p> <pre><code>// loaderConfig is LoaderConfig from IO library.\nvar deps = new DependencyChecker(loaderConfig, IntPtr.Size == 8); // 64-bit check\nif (deps.AllAvailable) return;\n\n// In deps array you can get install urls for any missing runtimes via the interface.\n</code></pre> <p>Grabs loader path from the loader config. This is used to check for missing dependencies on boot in cases where e.g. user installed 64-bit runtime but not 32-bit after ignoring the installer.</p>"},{"location":"LinuxSetupGuide/","title":"Linux Setup Guide","text":"<p>Help Needed</p> <p>This documentation page could be improved, it only covers the barebones information. Community contributions would be very welcome. </p>"},{"location":"LinuxSetupGuide/#wine","title":"Wine","text":"<p>Open a <code>Terminal</code> window (Konsole, GNOME Terminal, Kitty etc.) and install <code>wine</code> &amp; <code>winetricks</code>:  </p> Distro Command Apt Based (Ubuntu, Debian etc.) <code>sudo apt install wine winetricks</code> Arch Based (Arch, SteamOS, Manjaro) <code>sudo pacman -S wine winetricks</code> Fedora <code>sudo dnf -y install wine winetricks</code> <p>After installing wine, run <code>winetricks</code> from your terminal, we will install <code>.NET Framework</code>, which is used by the Reloaded installer.  </p> <p>Run the following command:</p> <pre><code>winetricks dotnet48\n</code></pre> <p>You can then download the Reloaded Installer (<code>Setup.exe</code>) from the downloads page, and run it via Wine (doubleclick).  </p> <p>Info</p> <p>The installer automatically installs Reloaded and dependencies for you. If the window does not render; don't worry the installer will still automatically complete. This process usually downloads ~120MB of data and takes 30-60 seconds for most people.  </p> <p>Tip</p> <p>If the installer has issues, you can try running it without GUI <code>wine Setup.exe --nogui</code>.  </p> <p>Note</p> <p>If you have the native version of .NET installed on your machine, it is possible that in some cases the native version might be executed by Wine as opposed to the installed Windows version.  </p> <p>Using <code>DOTNET_ROOT= wine Reloaded-II.exe</code> to run Reloaded might help.</p> <p>If install is successful, Reloaded's launcher will boot and a shortcut will be created on your desktop. If you cannot see it there, check Wine's Desktop folder (usually located in <code>&lt;your_home_dir&gt;/.wine/drive_c/users/&lt;username&gt;/Desktop/</code>).  </p> <p></p> <p>[Reloaded running on Modified SteamOS 3.0 (HoloISO), to simulate a Steam Deck]</p> <p></p>"},{"location":"LinuxSetupGuide/#finding-steam-games","title":"Finding (Steam) Games","text":"<p>Hint</p> <p>Wine by default hides files and folders that start with a dot; which might make it difficult to navigate to Steam games. To fix this, run <code>winecfg</code> (Wine Configuration) and check <code>Show dot files</code> in the <code>drives</code> tab.  </p> <p>The easiest way to find your Steam games is simply right clicking the game, right click and clicking <code>Manage -&gt; Browse local files</code>.  </p> <p>Then when adding the game in Reloaded, go to the folder opened by Steam inside the file picker.   </p>"},{"location":"LinuxSetupGuide/#using-asi-loader","title":"Using ASI Loader","text":"<p>Info</p> <p>You can launch Reloaded via the ASI Loader in the case that launching from Reloaded Launcher does not work. This will make it so Reloaded gets loaded naturally as part of the game's boot process (i.e. it will be automatically loaded when you start the game from outside the launcher).</p> <p>To do this, go to <code>Edit Application -&gt; Advanced Tools &amp; Options -&gt; Deploy ASI Loader</code>.  </p> <p></p> <p>Note down the name of the non-Reloaded DLL that has been placed inside the installation directory. In this case the name is <code>VERSION.dll</code>.  </p> <p>Then you will need to make sure that Wine will load this DLL; there is more than 1 way to achieve this:  </p> Recommended Approach (Per-Application)Alternative Approach (More Permanent) <p><code>WINEDLLOVERRIDES</code> lets you temporarily specify DLL overrides for a specific wine process. You can use it in the terminal as such: <code>WINEDLLOVERRIDES=\"version=n,b\" wine BTD5-Win.exe</code>.  </p> <p>If you are using Steam to launch your games you can, Right Click Game in Library, <code>Properties</code> and in <code>Launch Options</code> add <code>WINEDLLOVERRIDES=\"version=n,b\" %command%</code>.  </p> <p></p> <p>Alternatively, for a more permanent solution, you can run <code>winecfg</code> (Wine Configuration), navigate to <code>Libraries</code>, select the DLL in the <code>New override for library</code> box and click <code>Add</code>.  </p> <p></p> <p>Now Reloaded should automatically start with your game outside of the launcher.  </p>"},{"location":"LinuxSetupGuide/#installing-reloaded-manually","title":"Installing Reloaded Manually","text":"<p>Info</p> <p>If the installer does not work, or you wish to manually install Reloaded for any other reason, you can follow the instructions below.  </p> <p>Download and extract <code>Release.zip</code> form Reloaded's Latest Release: - Reloaded-II Release</p> <p>Download and install the following in Wine: - Visual C++ 2015+ Runtime x86 AND x64. - .NET 5 Desktop Runtime x86 AND x64.  </p> <p>You can now start Reloaded with <code>Reloaded-II.exe</code>.  </p>"},{"location":"LinuxSetupGuide/#proton","title":"Proton","text":"<p>Hint</p> <p>You should run the game via Proton (Steam) at least once before following this guide.  </p> <p>Info</p> <p>The following instructions will allow you to setup Reloaded to run inside your game's Proton configuration. This section assumes you have already setup Reloaded using Wine.  </p> <p>When you use Proton, Steam creates a 'clean slate' (<code>WINEPREFIX</code>) for each game; meaning that the dependencies for Reloaded wouldn't be installed when you run from Proton. We will use the Reloaded Installer (<code>Setup.exe</code>) to manually install the dependencies for Reloaded inside your game's WINEPREFIX and then setup Reloaded to run when you boot the game from Steam.  </p> <p>Start by finding the Steam App ID of the game [e.g. <code>306020</code>]. The recommended way to do this is protontricks (<code>protontricks -l</code>). Alternatively, you can get this number by searching your game on SteamDB, or by checking the store page.  </p> <p></p> <p>Once you have the AppID, locate the <code>WINEPREFIX</code> for your game, it should be located in <code>/home/&lt;YOUR_USERNAME&gt;/.local/share/Steam/steamapps/compatdata/306020/pfx</code>.  </p> <p>Run the following series of commands in your terminal, substituting the parts in <code>&lt;brackets&gt;</code>:  </p> <pre><code>## The path you located in the previous step.\nexport WINEPREFIX=\"/home/&lt;YOUR_USERNAME&gt;/.local/share/Steam/steamapps/compatdata/&lt;APPID&gt;/pfx\"\n\n## Run Reloaded Installer in 'Install Dependencies Only' mode.\nwine Setup.exe --dependenciesOnly\n\n## Create Symbolic Link for Mod Loader Settings.\nln -s \"/home/&lt;YOUR_USERNAME&gt;/.wine/drive_c/users/&lt;USERNAME&gt;/AppData/Roaming/Reloaded-Mod-Loader-II/\" \"/home/&lt;YOUR_USERNAME&gt;/.local/share/Steam/steamapps/compatdata/&lt;APPID&gt;/pfx/drive_c/users/steamuser/AppData/Roaming/Reloaded-Mod-Loader-II/\"\n</code></pre> <p>Once you are done, launch the Reloaded launcher and Deploy ASI Loader. If all goes well, you should be able to launch your game from Steam, running on Proton with Reloaded present.   </p> <p> </p> <p>Example: Bloons TD5 running on Proton via Steam.</p> <p>Warning</p> <p>Reloaded upgrades its .NET Runtime around once a year with, each release of the runtime. When this happens, you will need to upgrade your runtime by running <code>Setup.exe --dependenciesonly</code> again. Currently an upgrade to .NET 7 is expected on November 2022 Release.  </p>"},{"location":"LinuxSetupGuide/#setting-up-a-virtual-machine-testing-environment","title":"Setting up a Virtual Machine Testing Environment","text":"<p>Info</p> <p>Following section of the guide is for setting up a SteamOS 3.0 (HoloISO) virtual machine. Distro chosen due to popularity of the Steam Deck, it's currently at the time of writing the closest thing you can get to emulating a Deck user experience.  </p> <p>This is intended for people who wish to contribute to Reloaded, since testing with a VM can be faster.  </p>"},{"location":"LinuxSetupGuide/#vmware-player","title":"VMWare Player","text":"<p>Open the <code>.vmx</code> configuration file for your virtual machine and add the following line.  </p> <pre><code>firmware=\"efi\"\n</code></pre> <ul> <li>Install HoloISO.  </li> <li>Chroot into install (desktop icon).  </li> </ul> <pre><code>## VMWare Stuff (optional)\npacman -S open-vm-tools nano \nsystemctl enable vmtoolsd.service\nsystemctl enable vmware-vmblock-fuse.service\n</code></pre> <p>Once booted, to finish installation do the following: - In Settings -&gt; Background services -&gt; Disable KScreen 2, to be able to change resolution. - If you need copy/paste support, run <code>vmware-user &amp;</code> in a terminal.  </p>"},{"location":"LinuxSetupGuide/#virtualbox","title":"VirtualBox","text":"<p>Warning</p> <p>VirtualBox is not recommended. Parts of Reloaded's launcher might not render. This is a VBox specific issue; if you know a workaround, consider contributing to the wiki.  </p> <ul> <li>Enable EFI </li> </ul> <p></p> <ul> <li>Install HoloISO.  </li> <li>Chroot into install (desktop icon).  </li> </ul> <pre><code>## VirtualBox Stuff (optional)\npacman -S virtualbox-guest-utils\nsystemctl enable vboxservice ## Force desktop environment\nsteamos-session-select plasma-persistent\n</code></pre>"},{"location":"LocalizingReloaded/","title":"Localization","text":"<p>Reloaded-II supports localization, meaning that the entirety of the launcher's user interface can be translated to, or viewed in another language.</p>"},{"location":"LocalizingReloaded/#state-of-localization","title":"State of Localization","text":"<p>At the current moment in time, the implementation of localization is primitive and only covers the launcher (loader &amp; mods are not localized).  I am not sure how much demand there is for localizations.</p>"},{"location":"LocalizingReloaded/#how-does-localization-work","title":"How does Localization Work?","text":"<p>The launcher loads a XAML (basically XML) file present in the <code>Languages</code> folder of the launcher. In-launcher, the dropdown is automatically populated with the list of every file available in that folder, by name.</p> <p>If no translation exists for a piece of text, the text will default to English (Great Britain), i.e. a string from <code>en-GB.xaml</code> will be used.</p>"},{"location":"LocalizingReloaded/#where-are-the-localization-files","title":"Where are the Localization Files","text":"<p>For a downloaded/release version of Reloaded II, the languages are stored in the <code>Languages</code> folder inside the launcher directory.</p> <p>If you are working with the Source Code of Reloaded II, the localizations are stored in <code>Source/Reloaded.Mod.Launcher/Assets/Languages</code>.</p>"},{"location":"LocalizingReloaded/#creating-translations","title":"Creating Translations","text":"<p>Creating translations is very easy.</p> <p>If you are creating a new translation, copy the file <code>en-GB.xaml</code> (default language), and modify the containing text in a text editor.</p> <p>If you are updating a translation, check <code>en-GB.xaml</code>for any missing entries and append them to the end of your translation file. </p> <p>As Reloaded gets updated, new text is always added to the bottom of  <code>en-GB.xaml</code>. You can determine if a translation is complete if the last text entry for any language and <code>en-GB.xaml</code> is the same.</p>"},{"location":"ModTemplate/","title":"Mod Template Features","text":"<p>Tip</p> <p>Some features are only available on newer versions of the template.  </p>"},{"location":"ModTemplate/#publish-script","title":"Publish Script","text":"<p>This template features a built-in publish script that can be used to create releases of your mod.  </p> <p>To run it, open a Powershell prompt in your mod folder and execute the script as such: <pre><code>.\\Publish.ps1\n</code></pre></p> <p>Once the script completes, ready to upload packages will be output to the <code>Publish/ToUpload</code>.  </p> <p>For extended help with the script and examples, consider running: <pre><code>Get-Help .\\Publish.ps1 -Detailed\n</code></pre></p>"},{"location":"ModTemplate/#delta-updates","title":"Delta Updates","text":"<p>Reloaded allows for the creation and usage of delta updates.</p> <p>A delta update is an update that only requires the user to download the code and data that has changed, not the whole mod all over. It significantly saves on time and bandwidth usage.</p> <pre><code># Publish using GitHub Releases as the delta source.\n./Publish.ps1 -MakeDelta true -UseGitHubDelta true -GitHubUserName Sewer56 -GitHubRepoName Reloaded.SharedLib.Hooks.ReloadedII -GitHubFallbackPattern reloaded.sharedlib.hooks.zip\n</code></pre> <pre><code># Publish using NuGet as the delta source.\n./Publish.ps1 -MakeDelta true -UseNuGetDelta true -NuGetPackageId reloaded.sharedlib.hooks -NuGetFeedUrl http://packages.sewer56.moe:5000/v3/index.json\n</code></pre> <p>See Delta Updates on more information about the topic.</p>"},{"location":"ModTemplate/#publishing-as-readytorun","title":"Publishing as ReadyToRun","text":"<p>Note</p> <p>Using ReadyToRun is incompatible with unloadable mods due to a runtime limitation. If you are using ReadyToRun, you should return <code>false</code> in <code>CanUnload()</code>.</p> <p>If your mod has a lot of code that is executed at startup, consider using <code>ReadyToRun</code> in order to reduce the startup time.  </p> <p>To use <code>ReadyToRun</code> set the <code>BuildR2R</code> flag to true when using the build script.  </p> <pre><code>.\\Publish.ps1 -BuildR2R true\n</code></pre> <p>R2R is a new type of officially supported file format, which gives a considerable improvement to startup times by shipping native code alongside standard .NET IL code; at the expense of assembly (DLL) size.  </p> <p>You can read more about R2R in the following web resources:</p> <ul> <li>Conversation about ReadyToRun </li> <li>ReadyToRun Compilation </li> </ul>"},{"location":"ModTemplate/#assembly-trimming-support","title":"Assembly Trimming Support","text":"<p>Note</p> <p>Trimming framework-dependent code is not an officially supported .NET feature. Trimming in Reloaded is a custom feature that uses existing .NET SDK components under the hood.  </p> <p>Danger</p> <p>Incorrect use of trimming can and will break your mods. When using trimming you should test your mods thoroughly.  </p> <p>Assembly trimming allows you to remove unused code from your mods (and their dependencies), often significantly shrinking the size of the generated DLLs. This in turn improves load times, download size and runtime memory use. At the time of writing, the Reloaded Loader itself and most official &amp; creator made mods use trimming.</p>"},{"location":"ModTemplate/#testing-trimming","title":"Testing Trimming","text":"<p>Testing trimming is performed with included <code>BuildLinked.ps1</code> in the mod template. This script will fully wipe the mod output folder and build with trimming. When the build is done, go test your mod.  </p> <p>Sample output: <pre><code>Input Assembly: Reloaded.Hooks.Definitions [Mode: link]\nInput Assembly: Reloaded.Mod.Interfaces [Mode: link]\nInput Assembly: Reloaded.Hooks.ReloadedII.Interfaces [Mode: link]\nInput Assembly: Reloaded.Mod.Template [Mode: link]\n</code></pre></p> <p><code>link</code> indicates the assembly is being trimmed. <code>` (empty) means trim if</code>IsTrimmable` == true, else use default trimmer setting [copy].  </p>"},{"location":"ModTemplate/#configuring-trimming","title":"Configuring Trimming","text":"<p>Trimming can be configured by modifying your <code>.csproj</code> file. The following properties can be used to control the trimming process.  </p> Reloaded Property Purpose Replacement for. ReloadedILLink Enables trimming at publish time. PublishTrimmed ReloadedLinkRoots Specifies a DLL/Assembly to be preserved in its entirety. TrimmerRootAssembly ReloadedLinkAssemblies Specifies a DLL/Assembly to be force trimmed. ManagedAssemblyToLink <p>Other officially supported properties can be used. For example you could supply an XML Root Descriptor with <code>TrimmerRootDescriptor</code> for more granular control.  </p>"},{"location":"ModTemplate/#default-trimming-behaviour","title":"Default Trimming Behaviour","text":"<p>The default trimming behaviour used in Reloaded mods replicates the behaviour from .NET 6 (not .NET 7+). The following general rules apply:  </p> <ul> <li>Only assemblies marked <code>IsTrimmable</code> are trimmed by default.  </li> <li>Default trimming mode (<code>TrimMode</code>) is <code>link</code> (remove unused assemblies + code).  </li> </ul>"},{"location":"ModTemplate/#general-trimming-guidance","title":"General Trimming Guidance","text":"<p>Tip</p> <p>This is general guidance from personal experience with developing Reloaded.  </p> <p>Doing the following steps is advised for enabling trimming:  </p> <ul> <li>Build with <code>BuildLinked.ps1</code>.  </li> <li>Add all assemblies with trim warnings to <code>ReloadedLinkAssemblies</code>.  </li> <li>Build again and test.  </li> </ul> <p>Note</p> <p>If you have marked an assembly to not be trimmed with <code>ReloadedLinkAssemblies</code>, but it still displays a trim warning, feel free to ignore the warning.</p> <p>Basic trimming now works. </p>"},{"location":"ModTemplate/#trimming-the-remainder","title":"Trimming the Remainder","text":"<p>To further optimise your mod, you can now force trimming on individual libraries. To do so, perform the following.  </p> <ul> <li> <p>Inspect the build output: <pre><code># Sample Output\nInput Assembly: Reloaded.Hooks.Definitions [Mode: link]\nInput Assembly: Reloaded.Mod.Interfaces [Mode: link]\nInput Assembly: Deez.Nutz.Library [Mode: copy]\n</code></pre></p> </li> <li> <p>For each library where <code>Mode != link</code>.  </p> </li> <li>Enable trimming for library (using <code>ReloadedLinkAssemblies</code>).  </li> <li>Build and test the mod.  </li> <li>If the mod does not run correctly, remove library from <code>ReloadedLinkAssemblies</code>.  </li> </ul>"},{"location":"ModTemplate/#automated-builds","title":"Automated Builds","text":"<p>If you are using <code>GitHub</code> to host your project, the mod template contains a script for automatically building and uploading your mod for others to download.  </p> <p>It has the following features: - Automatically build mod for <code>GameBanana</code>, <code>GitHub</code> &amp; <code>NuGet</code>. - Automatically create changelog (using <code>git</code> commits). - Automatically upload your mod on tags (releases).     - Creates GitHub Release.     - Uploads to NuGet (if configured).     - If configured correctly, end users will automatically receive update.  </p> <p>You can find and/or modify the script at <code>.github/workflows/reloaded.yml</code>.  </p>"},{"location":"ModTemplate/#accessing-build-results","title":"Accessing Build Results","text":"<p>To access your automated builds, click the <code>Actions</code> button, select the latest ran <code>workflow</code> and scroll down until you see the <code>Artifacts</code> section.  </p> <p> </p> <p>Please note the <code>Artifacts</code> have a limited lifespan, usually GitHub deletes them after around 30 days.  </p>"},{"location":"ModTemplate/#automatic-publishing","title":"Automatic Publishing","text":"<p>In order to publish (upload) your mod, simply push a <code>tag</code> to the remote GitHub repository.  When the automated build finishes, the script will create a GitHub release and upload the mod to NuGet (if configured).</p> <p>Example of an automated release:  </p> <p> </p>"},{"location":"ModTemplate/#publishing-to-nuget","title":"Publishing to NuGet","text":"<p>Publishing to NuGet requires additional configuration. - Set a NuGet Feed URL - Set a NuGet API Key</p> <p>To set the NuGet feed, open <code>workflows/reloaded.yml</code> and change the <code>NUGET_URL</code> variable. The default is <code>http://packages.sewer56.moe:5000/v3/index.json</code> in which points to the official Reloaded II NuGet repository.  </p> <p>To set the API Key, add a Secret named <code>RELOADED_NUGET_KEY</code>.  </p>"},{"location":"ModTemplate/#multiple-mods-per-repository","title":"Multiple Mods Per Repository","text":"<p>If you want to use the same repository for multiple mods, it is recommended you create a <code>PublishAll.ps1</code> that runs the publish script multiple times with different parameters.  </p> <p>Here is an example:  </p> <pre><code># Set Working Directory\nSplit-Path $MyInvocation.MyCommand.Path | Push-Location\n[Environment]::CurrentDirectory = $PWD\n\n./Publish.ps1 -ProjectPath \"Reloaded.Universal.Redirector/Reloaded.Universal.Redirector.csproj\" `\n              -PackageName \"Reloaded.Universal.Redirector\" `\n              -PublishOutputDir \"Publish/ToUpload/Redirector\" \n\n./Publish.ps1 -ProjectPath \"Reloaded.Universal.Monitor/Reloaded.Universal.Monitor.csproj\" `\n              -PackageName \"Reloaded.Universal.Monitor\" `\n              -PublishOutputDir \"Publish/ToUpload/Monitor\" \n\n./Publish.ps1 -ProjectPath \"Reloaded.Universal.RedirectorMonitor/Reloaded.Universal.RedirectorMonitor.csproj\" `\n              -PackageName \"Reloaded.Universal.RedirectorMonitor\" `\n              -PublishOutputDir \"Publish/ToUpload/RedirectorMonitor\" \n\n# Restore Working Directory  \nPop-Location\n</code></pre> <p>Then modify <code>workflows/reloaded.yml</code> to call <code>PublishAll.ps1</code> script instead of <code>Publish.ps1</code> script.  </p> <p>Example repositories with this setup: - Reloaded.Universal.Redirector - Heroes.Controller.Hook - Riders.Controller.Hook </p>"},{"location":"ModTemplate/#updating-the-mod-template","title":"Updating the Mod Template","text":"<p>Tip</p> <p>To update the template, you can run the command dotnet new update.  </p> <p>Info</p> <p>If your mod was created using a template older than August 2022, [consider using the following guidance.] (#updating-from-old-template-layout).  </p> <p>To update the mod template, do the following actions: - Create a new dummy mod (using the same project name as your existing mod). - Copy all files that aren't <code>Mod.cs</code> and <code>Config.json</code> to your existing mod. - Update <code>Reloaded.Mod.Interfaces</code> NuGet Package. - [Optional] Look inside <code>ModConfig.json</code> and <code>.csproj</code> for new fields/properties (for example, <code>ProjectUrl</code> was added in August 2022). </p> <p>You are done. </p>"},{"location":"ModTemplate/#updating-from-old-template-layout","title":"Updating from Old Template Layout","text":"<p>Info</p> <p>Older versions of the mod template (pre Sep. 2022) encouraged editing of the template directly, newer templates take a different approach. Templates can now be swapped out and new features can be applied in <code>Mod.cs</code> and <code>Config.cs</code>. While not exhaustive, the following guidance can be used to help migrate to the new template format.  </p>"},{"location":"ModTemplate/#check-default-imod-programcs-settings","title":"Check Default IMod (Program.cs) Settings","text":"<p>Info</p> <p>Older versions of the mod template (pre Sep. 2022) encouraged editing of the template directly, newer templates take a different approach. Templates can now be swapped out and new features can be applied in <code>Mod.cs</code> and <code>Config.cs</code>. While not exhaustive, the following guidance can be used to help migrate to the new template format.  </p> <p>Old Defaults: - <code>CanSuspend</code>: false - <code>CanUnload</code>: false - <code>Suspend()</code>, <code>Unload()</code>, <code>Resume()</code>, <code>Disposing()</code>: Empty. - <code>OnConfigurationUpdated()</code>: Prints to console and assigns to field.  </p> <p>If any of these are non-default in the old <code>IMod</code> implementation (<code>Program.cs</code>), you should move the non-default values to <code>Mod.cs</code> in the new template. Mod.cs inherits from <code>ModBase</code> which exposes the old methods as overridable virtual functions.  </p> <pre><code>// Add to Mod.cs to override old CanSuspend.\npublic override bool CanSuspend() =&gt; true;\n</code></pre>"},{"location":"ModTemplate/#move-user-code-from-imod-programcs","title":"Move User Code from IMod (Program.cs)","text":"<p>The old layout suggested placing custom code under the line which reads:  </p> <pre><code>// Please put your mod code (in the class) below\n</code></pre> <p>If you encounter this line, move the code below this line into the constructor of <code>Mod.cs</code> in the new template.  </p>"},{"location":"ModTemplate/#configuration-migration","title":"Configuration Migration","text":"<p>Info</p> <p>If your mod was created before 2022, you will need to migrate where your configurations are stored when using the newer templates.</p> <p>Previously mods would store configurations in their own folders, however in newer versions a separate dedicated folder is now used. (You can find it in a mod's right click menu in the launcher).  </p> <p>To migrate your configurations, locate the <code>ConfiguratorMixin</code> class (usually in <code>Config.cs</code>), and add the following method.</p> <pre><code>public override void Migrate(string oldDirectory, string newDirectory)\n{\n// Replace Config.json with your original config file name.\nTryMoveFile(\"Config.json\");\n\n#pragma warning disable CS8321\nvoid TryMoveFile(string fileName)\n{\ntry { File.Move(Path.Combine(oldDirectory, fileName), Path.Combine(newDirectory, fileName)); }\ncatch (Exception) { /* Ignored */ }\n}\n#pragma warning restore CS8321\n}\n</code></pre> <p>This process can also be used to handle migration for other config modifications such as when <code>TryRunCustomConfiguration() == true</code>.  </p>"},{"location":"NativeMods/","title":"About Native Mods","text":"<p>Intended for communities who want to try out using Reloaded, transitioning to the mod loader or have a niche reason to use C/C++. Reloaded II has limited support for native C/C++ modifications compiled as DLLs. As standard, this is implemented through the use of DLL Exports.</p> <p>Native mods lack access to components such as the mod loader API but can use some limited mod loader functionality, such as Resume and Suspend provided the right exports are available. </p>"},{"location":"NativeMods/#mod-configuration","title":"Mod Configuration","text":"<p>Just like any other mods, native mods with Reloaded require for <code>ModConfig.json</code>  to be present. This file must be present to allow the loader to know which DLL to load.</p> <p>You can control which file the mod loader will load for x64 and x86 processes using the following config entries:  <pre><code>\"ModNativeDll32\": \"LostWorldQuickBoot.dll\",\n\"ModNativeDll64\": \"\",\n</code></pre> To generate the config file, create a new mod from within the launcher.</p>"},{"location":"NativeMods/#exports","title":"Exports","text":"<p>Entry Points:</p> <p>Reloaded tries to start mods by using the following entry points in order:</p> <ul> <li>ReloadedStart</li> <li>InitializeASI</li> <li>Init</li> </ul> <p>If none of these entry points is found, the mod will not be loaded. The exported methods should have no parameters and return <code>void</code>.</p> <p>Suspend, Resume, Unload:</p> <p>Reloaded II's Resume, Suspend and Unload functionalities are available for native mods.  Virtually identical to their C# counterparts in the <code>IMod</code> interface, they require the following exports:</p> <ul> <li>ReloadedSuspend</li> <li>ReloadedResume</li> <li>ReloadedUnload</li> <li>ReloadedCanUnload</li> <li>ReloadedCanSuspend</li> </ul> <p><code>CanUnload</code> and <code>CanSuspend</code> are defined as <code>bool fn()</code> while <code>Suspend</code>, <code>Resume' and 'Unload</code> are defined as <code>void fn()</code>.</p> <p>That said, if you are hooking/detouring functions I would strongly advise against implementing these interfaces unless you know what you are doing.</p> <p>Specifically, you will need to use a good hooking/detouring library that fully respects stacked function hooks. It must allow for hook deactivation in a way that avoids touching both your C++ DLL and overwriting the original prologue of the hooked function. </p> <p>Here is an example of how such a hooking library may be implemented: Reloaded.Hooks.</p>"},{"location":"NativeMods/#corertnativeaot","title":"CoreRT/NativeAOT?","text":"<p>Yes you can; mad scientist. </p>"},{"location":"NuGetSources/","title":"NuGet Sources","text":"<p>NuGet is the primary source for downloading mods and searching for missing mod dependencies. You can directly download mods from NuGet servers via the <code>Download Mods</code> menu.</p> <p>Reloaded comes preconfigured with a single official server intended for hosting code mods.</p>"},{"location":"NuGetSources/#adding-new-sources","title":"Adding new Sources","text":"<p>Additional NuGet servers can be configured from inside the <code>Download Mods</code> menu by pressing <code>Configure Sources</code>.</p> <p></p> <p>Simply press the <code>New</code> button and then fill a name and URL. The URL should point to something called a <code>NuGet Index</code>. This is a URL which generally ends with <code>/v3/index.json</code>.</p> <p>This URL is generally provided on either a <code>Feed Details</code> or <code>Upload Instructions</code> page.</p> <p>Example URLs:</p> <ul> <li>Official NuGet Gallery Index: https://api.nuget.org/v3/index.json</li> <li>Example MyGet Index URL: https://www.myget.org/F/reloaded-ii-tests/api/v3/index.json</li> <li>Official BaGet Server URL: http://packages.sewer56.moe:5000/v3/index.json</li> </ul> <p>Please Note:</p> <p>Reloaded handles NuGet errors silently. If it cannot contact a NuGet server; it wouldn't display any error message, etc.</p>"},{"location":"NuGetSources/#hosting-a-server","title":"Hosting A Server","text":"<p>Reloaded-II uses the NuGet V3 API and as such any API compliant NuGet server should work correctly without problems. The official Reloaded server uses a modified version of BaGet, forked as BaGet-Reloaded. Self hosting instructions for a clean VPS are provided in the repository.</p> <p>Other servers/services known to work properly are MyGet as well as the official NuGet Gallery.</p>"},{"location":"OptimizingMods/","title":"Optimizing Mods","text":"<p>This document details various methods and techniques in which mods may be optimized to run for the end user. </p> <p>Focusing mainly on techniques which may not be immediately obvious, the main goal is to obtain better startup times, although some other optimizations are also available.</p>"},{"location":"OptimizingMods/#speed-focused-optimizations","title":"Speed-Focused Optimizations","text":""},{"location":"OptimizingMods/#lazy-loading","title":"Lazy Loading","text":"<p>Lazy loading is simply the process of deferring initialization of an object/thing until the point at which it is needed.</p> <p>Sometimes in your <code>Mod.cs</code> entry point, you might not need to necessarily need to initialize everything related to your mod immediately.</p> <p>For example, if you need to make a connection to a server which will be used later in execution (say you are interacting with a chatroom in a mod etc.), the initial startup of the mod does not have to be halted until this connection is made. You can make the connection in the background and any code depending on the connection can wait for the connection task to finish.</p>"},{"location":"OptimizingMods/#lazy-loading-example","title":"Lazy Loading Example","text":"<p>Consider a case where you have a code that requires an object, and the object is not required to be used in the <code>Start()</code> method itself.</p> <p>You can create the object just in time for when it is needed:</p> <pre><code>// Function hook by the game/application.\npublic void SomeHookFunction(int a1, int b2) {\n// Create someObject is not previously created.\nif (someObject == null)\nsomeObject = new SomeClass();\n\n/* Do something with someObject ... */\n\n// Call original function, as part of standard hook procedure\n_someHook.OriginalFunction(a1, b2);\n}\n</code></pre> <p>This is a very simplified example.</p> <p>The framework built-in class <code>Lazy&lt;T&gt;</code> is very useful. Consider reading this useful resource: https://docs.microsoft.com/en-us/dotnet/framework/performance/lazy-initialization</p>"},{"location":"OptimizingMods/#asynchronous-loading","title":"Asynchronous Loading","text":"<p>Another great way to not stall mod startup is to perform setup/initialization tasks asynchronously, the Task Parallel Library (TPL) is great for doing this.</p> <p>Consider creating a connection to a server.</p> <pre><code>// Inside class fields.\nprivate Task _connectToServerTask;\n\n// Inside Mod.cs Constructor\n_connectToServerTask = Task.Run(() =&gt; { /* Code to Connect to a Server */ });\n\n// Somewhere else in code that needs the server to be created.\n// (Unlikely for this specific scenario).\n_connectToServerTask.Wait(); // Will stall execution until task completes.\n</code></pre>"},{"location":"OptimizingMods/#danger-race-conditions","title":"Danger: Race Conditions","text":"<p>The important thing to note about lazy loading however is the possibility of race conditions for shared resources (such as native memory). Mainly, please do not create function hooks/detours asynchronously. </p> <p>Consider two mods creating hooks for the same function at the same time. When they read the first initial bytes of the function into memory, they would get the same result for the 'original function' to execute. </p> <p>What does this mean? The hooks are unaware of each other (as 'original code'). Calling the 'original function' from either of the hooks would not call the other hooks. </p> <p>In other words, only one of the mods' hooks works.</p>"},{"location":"OptimizingMods/#publish-as-readytorun","title":"Publish as ReadyToRun","text":"<p>.NET Core 3+ has a new type of officially supported file format for publishing applications known as ReadyToRun (abbreviated as R2R).</p> <p>The main advantage of R2R is that it boasts significant improvement to startup times by shipping native code alongside IL code to essentially create hybrid assemblies.</p> <p>For more details, see Mod Template: Ready To Run.</p>"},{"location":"OptimizingMods/#use-shared-libraries","title":"Use Shared Libraries","text":"<p>See Shared Libraries doc. for the benefits, drawbacks, etc.</p>"},{"location":"OptimizingMods/#space-focused-optimizations","title":"Space-Focused Optimizations","text":""},{"location":"OptimizingMods/#update-target-framework","title":"Update Target Framework","text":"<p>For older mods, it's possible to save storage space by updating the target framework of your mod to match the latest framework version used by Reloaded. </p> <p>To do so, simply edit your project's <code>.csproj</code> file:</p> <pre><code>&lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;\n</code></pre> <p>The target DLL is now built for .NET 5.</p> <p>Updating your target framework might lead to some DLLs being excluded from your build output (such as <code>System.Text.Json</code>), since they will be directly available in the newer runtime.  </p>"},{"location":"ProjectSetup/","title":"Project Setup","text":"<p>Once the required tools are installed, you can now begin developing your mod.  </p>"},{"location":"ProjectSetup/#creating-your-project","title":"Creating Your Project","text":"<p>Below is information on how to create a new Reloaded project. Once you create your project, you'll be able to open the <code>.csproj</code> file in your preferred IDE of choice. (or the folder where it is contained)</p>"},{"location":"ProjectSetup/#from-a-supported-ide","title":"From a Supported IDE","text":"<p>Some IDEs such as Visual Studio and JetBrains Rider allow you to create a new project directly from IDE.</p> <p> </p>"},{"location":"ProjectSetup/#from-the-command-line","title":"From the Command Line","text":"<p>Alternatively, you may create a project from the commandline. Navigate to an empty folder and run the following command.  </p> <pre><code>dotnet new reloaded -n &lt;NAMESPACE&gt; --ModName &lt;MOD_NAME&gt; --ModAuthor &lt;MOD_AUTHOR&gt; \n</code></pre> <p>Replace <code>&lt;NAMESPACE&gt;</code> with your desired name of your project, <code>&lt;MOD_NAME&gt;</code> with the name of the mod as shown to the end user and <code>&lt;MOD_AUTHOR&gt;</code> with your own name.</p> <p>For extended information on other options you can also run: <pre><code>dotnet new reloaded --help\n</code></pre></p>"},{"location":"ProjectSetup/#mod-structure","title":"Mod Structure","text":"<p>Reloaded Projects compose of the following structure: - Metadata File (<code>ModConfig.json</code>) - Project Configuration (<code>.csproj</code>) - Preview Icon (<code>Preview.png</code>) - Your Mod Code (<code>Program.cs</code>, <code>Mod.cs</code>)</p> <p>The metadata file contains essential information </p>"},{"location":"ProjectSetup/#metadata-file-modconfigjson","title":"Metadata File (ModConfig.json)","text":"<p>The metadata file contains essential information such as mod author, name, description, and supported applications.  </p> <p>Example <code>ModConfig.json</code>: </p> <p>Common Fields: - <code>ModId</code>: A name that uniquely identifies your mod. - <code>ModName</code>: The name of your mod. - <code>ModAuthor</code>: The author of your mod. - <code>ModDescription</code>: A description of your mod. - <code>SupportedAppId</code>: Applications for which the mod should be enabled for by default. Uses lower case exe name.  </p> <p>It is recommended to use the format <code>game.type.name</code> for <code>ModId</code> (e.g. <code>sonicheroes.asset.seasidehillmidnight</code>). <code>ModId</code> should also be human readable. Once you release your mod, do not change ModId!!.  </p> <p>The recommended method of editing the metadata file is: - Build your mod (see below). - Editing the config from the <code>Reloaded Launcher</code>     - <code>Manage Mods</code> -&gt; Select Your Mod -&gt; Click <code>Edit Mod</code> - Copying the modified <code>ModConfig.json</code> file back to your project.  </p>"},{"location":"ProjectSetup/#building-your-mod","title":"Building Your Mod","text":"<p>If you are using an IDE such as Visual Studio, simply build your project. (<code>Build-&gt;Build Solution</code>).  </p> <p>If you are using the command-line you can build using the following command  <pre><code>dotnet build\n</code></pre></p> <p>The mod will automatically be copied to your Reloaded-II's <code>Mods</code> folder, as long as Reloaded has not been moved since it was last launched.  </p>"},{"location":"ProjectSetup/#debugging-your-mod","title":"Debugging Your Mod","text":"<p>Enable the mod and run the game via Reloaded.  </p> <p>If you have built your mod in <code>Debug</code> configuration and a supported IDE/Debugger installed, you should automatically receive a debug prompt like the following when running your game/application.   </p> <p> </p> <p>Select your IDE/Debugger of choice and have fun.  </p>"},{"location":"ProjectStructure/","title":"Project Structure","text":""},{"location":"ProjectStructure/#core-components","title":"Core Components","text":""},{"location":"ProjectStructure/#reloadedmodlauncher-reloadedmodlauncherlib","title":"Reloaded.Mod.Launcher + Reloaded.Mod.Launcher.Lib","text":"<p>The WPF application responsible for the management of settings, mods, registered applications as well as loading and communicating with the mod loader.  </p> <ul> <li><code>Reloaded.Mod.Launcher</code> contains the view (WPF) portion.  </li> <li><code>Reloaded.Mod.Launcher.Lib</code> contains the actual launcher code, including <code>ViewModels</code>.  </li> </ul> <p>Powered by .NET 5.X at the time of last update.</p>"},{"location":"ProjectStructure/#reloadedmodloader","title":"Reloaded.Mod.Loader","text":"<p>The mod loader itself, it unironically loads mods.  </p> <p>For each mod, the loader provides isolation through a plugin system such that they can load each of their own dependencies without version clashes: For example one mod could load <code>Json.NET 10</code> and another <code>Json.NET 11</code>, despite both having the same DLL name.  </p> <p>The loader also supports a local server, which can be accessed by other clients such as the launcher. Said server provides support for e.g. Loading/Unloading/Suspending/Resuming mods and getting their state at runtime.</p>"},{"location":"ProjectStructure/#reloadedmodloaderbootstrapper-c","title":"Reloaded.Mod.Loader.Bootstrapper (C++)","text":"<p>Simple native bootstrapper DLL, which when injected into a process, loads the .NET Runtime and <code>Reloaded.Mod.Loader</code>. This DLL can be copied to integrate the mod loader into other loaders seamlessly.  Custom entry points for some common DLL Hijacking based loaders like Ultimate ASI Loader are also supported.  </p> <p>By default it loads asynchronously. Due to Windows DLL Loader lock, it cannot unfortunately run synchronously to ensure mods execute before application code, however support is added for restarting the process via Reloaded's launcher, which will ensure mods load before application code.  </p> <p>This bootstrapper also ensures the loader is only loaded once into the process.  </p>"},{"location":"ProjectStructure/#reloadedmodlauncherkernel32addressdumper","title":"Reloaded.Mod.Launcher.Kernel32AddressDumper","text":"<p>Simple utility program that is executed by <code>Reloaded.Mod.Launcher</code> during startup. It is used to extract the address of the <code>LoadLibraryW</code> function to allow for DLL Injection into x86 processes from an x64 one.</p>"},{"location":"ProjectStructure/#tools","title":"Tools","text":""},{"location":"ProjectStructure/#reloadedmodinstaller","title":"Reloaded.Mod.Installer","text":"<p>One click custom written installer for Reloaded. Installs all necessary dependencies and gets the mod loader up and running in under a minute.  </p> <p>Written in .NET 4.7.2 which should be preinstalled in any up to date Windows version. Ships as <code>Setup.exe</code>.</p>"},{"location":"ProjectStructure/#nugetconverter","title":"NuGetConverter","text":"<p>Simple program for generating NuGet packages which can be later uploaded to a repository and consumed within Reloaded. Intended for usage in CI/CD scenarios, where updates need to be automatically generated without the use of a GUI.  </p> <pre><code>Reloaded-II NuGet Package Converter\nConverts mod folders or archives into NuGet packages.\nUsage: NuGetConverter.exe &lt;Mod Folder or Archive Path&gt; &lt;Output Path&gt;.\nExample: NuGetConverter.exe Mod.zip Mod.nupkg\nExample: NuGetConverter.exe reloaded.test.mod reloaded.test.mod.nupkg\nExample: NuGetConverter.exe reloaded.test.mod ./packages/reloaded.test.mod.nupkg\n</code></pre>"},{"location":"ProjectStructure/#reloadedpublisher","title":"Reloaded.Publisher","text":"<p>Simple program that generates update files and releases without requiring the use of the full launcher. Intended for usage in CI/CD scenarios, where updates need to be automatically generated without the use of a GUI.  </p>"},{"location":"ProjectStructure/#libraries","title":"Libraries","text":""},{"location":"ProjectStructure/#reloadedmodinterfaces","title":"Reloaded.Mod.Interfaces","text":"<p>Project containing interfaces for mod loader components to be shared between the mod loader and other external components such as mods. This package contains no code, only interfaces and is the only requirement to get a Reloaded mod started.  </p> <p>Usually compiles down to tiny ~8KB DLL.</p>"},{"location":"ProjectStructure/#reloadedmodloaderio","title":"Reloaded.Mod.Loader.IO","text":"<p>Contains the code for reading all and monitoring configuration files in Reloaded. Can be used as an external library outside of R-II.  </p>"},{"location":"ProjectStructure/#reloadedmodloaderserver","title":"Reloaded.Mod.Loader.Server","text":"<p>A library allowing you to send remote commands to an instance of Reloaded living inside a process. Contains the complete implementation for the mod loader server including all of the messages, responses and general driving code.  </p> <p>It contains a fully featured client class for easy communication with the mod loader server. Only the host class is contained in the actual mod loader itself.</p>"},{"location":"ProjectStructure/#reloadedmodloaderupdate","title":"Reloaded.Mod.Loader.Update","text":"<p>The part of Reloaded responsible for fetching and applying updates for the individual mod packages. Separated out from <code>Reloaded.Mod.Launcher.Lib</code> for potential reuse.  </p>"},{"location":"ProjectStructure/#reloadedmodloaderupdatepackaging","title":"Reloaded.Mod.Loader.Update.Packaging","text":"<p>Subset of <code>Reloaded.Mod.Loader.Update</code> containing only the necessary code to create individual update packages. Separated out to keep tool binaries smaller.</p>"},{"location":"ProjectStructure/#reloadedmodinstallerdependencyinstaller","title":"Reloaded.Mod.Installer.DependencyInstaller","text":"<p>Subset of <code>Reloaded.Mod.Loader.Update</code>. Contains the code to search for missing dependencies and install them. Separated out in otder to keep the <code>Reloaded.Mod.Installer</code> binary small.</p>"},{"location":"ProjectStructure/#reloadedmodshared","title":"Reloaded.Mod.Shared","text":"<p>Contains items shared between the <code>Launcher</code>, <code>Loader</code> and <code>Kernel32AddressDumper</code>. Things that don't fit into any other library go here.</p>"},{"location":"QuickStart/","title":"Quick Start","text":""},{"location":"QuickStart/#add-an-application","title":"Add an Application","text":"<p>First step to getting started with Reloaded is to add an Application you'll be modifying. This can be found on the bottom left corner of the launcher, with the <code>+</code> button.  </p> <p></p> <p></p> <p>Make sure to add the App and not the app's launcher.</p>"},{"location":"QuickStart/#extract-mods","title":"Extract Mods","text":"<p>To install mods, simply extract a downloaded <code>zip</code> or <code>7z</code> file to the <code>Mods</code> folder.  </p> <p> </p> <p>If there is no single folder inside the downloaded mod, create one yourself.  </p>"},{"location":"QuickStart/#configure-mods","title":"Configure Mods","text":"<p>Some mods might support additional configuration, allowing you to tweak things.  </p> <p> </p> <p>If the \"Configure Mod\" is red when the mod is highlighted, the mod can be configured.</p>"},{"location":"QuickStart/#enable-mods","title":"Enable Mods","text":"<p>To enable mods, simply press the square checkbox.</p> <p> </p> <p>A mod is enabled if the checkbox is red, disabled if it is grey. Once you are done, press <code>Launch Application</code>.  </p> <p>Note</p> <p>Reloaded uses <code>.exe</code> name to determine which mods should automatically be assigned to an application.</p> <p>If a mod does not show in the application, click the 3 gear button (<code>Manage Mods</code>). From there, select the mod that you have just extracted from the list and check your game on the list below.</p>"},{"location":"Reloaded-II-Architecture/","title":"High Level Architecture","text":""},{"location":"Reloaded-II-Architecture/#code-injection-steps","title":"Code Injection Steps","text":"<p>The typical bootstrapping mechanism for Reloaded II looks like the following: - Launcher starts the application as a suspended state. - Launcher uses DLL injection to inject the Loader <code>Bootstrapper</code>. - The <code>Bootstrapper</code> loads the .NET runtime and the Loader. - The Loader parses configurations and loads individual mods. - Process is resumed by Launcher.</p> <p>Mods are loaded using a shared interface, implemented by mods. This works by forcing mods to load the same version of the interface that the main Loader was compiled against.</p>"},{"location":"Reloaded-II-Architecture/#detecting-reloaded-ii","title":"Detecting Reloaded II","text":"<p>Reloaded II is not intended to bypass DRM or anti-cheating software. It makes no attempts to hide itself. Reloaded II can be easily detected through one of the following two methods.  </p> <ul> <li> <p>Module List. If <code>Reloaded.Mod.Loader.dll</code> is found in the process' module list, there's a good chance that Reloaded is present inside the target process.</p> </li> <li> <p>Memory Mapped File. Alternatively, you can try opening a memory mapped file handle to <code>Reloaded-Mod-Loader-Server-PID-{a}</code> where <code>{a}</code> is the PID of the process you want to check. If the handle is valid, Reloaded is running inside the target process.</p> </li> </ul>"},{"location":"Reloaded-II-Architecture/#service-local-server","title":"Service: Local Server","text":"<p>Injected Reloaded instances inside the target process host a local UDP server which can easily be interacted with by connecting. The library <code>Reloaded.Mod.Loader.Server</code> can be used to interact with the server.  </p>"},{"location":"Reloaded-vs-Reloaded-II/","title":"Reloaded vs Reloaded II","text":""},{"location":"Reloaded-vs-Reloaded-II/#reloaded-i","title":"Reloaded I","text":"<p>The original Reloaded Mod Loader works by splitting the launcher application and loader application. Doing so separates the concerns of managing the mods and actually getting them running inside the target application.</p> <p>When the user selects <code>Launch</code> in the application, the Launcher would merely launch the Loader with a specific set of commandline parameters. On startup, the Loader application would read a config at the given path (from commandline parameters), do some setup and inject the relevant mod DLLs.</p> <p>The Loader application would then also act as a local server that can be used for printing debug messages.</p>"},{"location":"Reloaded-vs-Reloaded-II/#advantages","title":"Advantages","text":"<ul> <li> <p>This is more lightweight in terms of RAM usage as the actual mod loader is not injected inside of the target process and can be closed down after DLL injection occurs, although the benefits are minimal.</p> </li> <li> <p>Reloaded Mod DLLs supported by other mod loaders.</p> </li> <li>Because of AppDomain plumbing code (see below) and use of DLL Exports.</li> <li>On the flipside developer must either export make their own C++ bootstrapper and export <code>DllMain</code>  or mod loader must know to run the exported <code>Main</code> method.</li> <li>Reloaded-II can also be bootstrapped via the \"DLL Loader\" method to be executed by other loaders itself, nullifying this point entirely.</li> <li>Support of DLLs programmed in arbitrary Native/Managed programming languages (provided DLL exports are supported).</li> <li>In theory there is no reason that Reloaded II's architecture couldn't support native DLLs. Only catch is that it will have to distinguish them from .NET ones so a bit more code.</li> </ul>"},{"location":"Reloaded-vs-Reloaded-II/#disadvantages","title":"Disadvantages","text":"<ul> <li>Does not support \"Any CPU\" assemblies. The X86 and X64 versions of the assemblies have to be manually identified by the mod loader or specified by the user. </li> <li>Slower. Each DLL Injection requires at the very least the creation of a new thread inside the remote process <code>CreateRemoteThread</code>. </li> <li>Debugging print-outs are delayed due to networking (even on the same machine). An application can print something and then immediately crash. The print will not be delivered as it has not fully sent before the application crashed.</li> <li>In addition, connecting back to the local server adds to the startup time of the program. In theory ~50-100ms may not be much but it stacks once multiple mods with code are loaded.</li> <li>Each mod requires to have its own copy of the plumbing code to transfer its execution to another AppDomain.</li> <li>This is bad if changes are required to the plumbing code. Now suddenly every mod needs updated. The plumbing code can be in another assembly and that assembly would load the actual mod DLL. (Work on Reloaded Refactor/Reloaded II began by the point of realization)</li> <li>This is necessary because otherwise, if two mods will have different versions of the same library/assembly e.g. Mod A has JSON.NET 10, Mod B has JSON.NET 11, one mod will crash, killing the whole application.<ul> <li>If Mod A (JSON.NET 10) gets loaded first, Mod B will report <code>System.IO.FileNotFoundException.</code> on trying to load JSON.NET 11.</li> <li>If Mod B (JSON.NET 11) gets loaded last, Mod A will likely report <code>MissingMethodException</code> or <code>TypeLoadException</code>.</li> </ul> </li> </ul>"},{"location":"Reloaded-vs-Reloaded-II/#reloaded-ii","title":"Reloaded II","text":"<p>In the case of Reloaded II, things change considerably as there is only one standalone application, the WPF Graphical User Interface.</p> <p>What instead happens is that rather than the Launcher running the Loader as a separate standalone application, the loader instead ships in the form of an injectable DLL. In this case the actual loader itself is injected into the target application, which will in turn initialize and load successive mods using the native .NET APIs.</p> <p>Once Reloaded is injected, the WPF Graphical User Interface (as well as other programs) can check if Reloaded is present by looking in the modules list of the target. If the Reloaded DLL is there, it can be assumed mods are loaded. </p>"},{"location":"Reloaded-vs-Reloaded-II/#interacting-with-reloaded-ii","title":"Interacting with Reloaded II","text":"<p>Injected Reloaded inside the target process hosts a local UDP server which can easily be interacted with by connecting. As opposed to having a one server and then a client for every single loaded mod, there is only one server (and one client if the Launcher is connected).</p> <p>Having to create only one host significantly reduces startup time.</p>"},{"location":"Reloaded-vs-Reloaded-II/#reloaded-ii-vs-reloaded-i","title":"Reloaded II vs Reloaded I","text":"<p>Below is a summarized list of advantages and disadvantages of the Reloaded II approach over the Reloaded I approach. Given that many advantages and disadvantages are already listed above, this list will focus on the aspects not mentioned prior.</p>"},{"location":"Reloaded-vs-Reloaded-II/#advantages_1","title":"Advantages","text":"<ul> <li>Tagging. It is very easy to determine whether Reloaded is active/has performed operations on an application. Simply check if the Reloaded DLL is loaded inside the target process.</li> <li>This also makes it possible (and much easier) for other programs to interact with Reloaded. No need to e.g. store the server port in an external file in the case of needing to re-connect.</li> <li>Loader as a Service. The mod loader can now natively send events to the subscribing mods. (With a tiny bit extra effort). The mods can also send events to the mod loader.</li> <li>This requires a bit of extra effort as the events would need to cross AppDomain boundaries but as no complications are introduced for programmers/mod developers this is ok.</li> <li>This is also of course possible with Reloaded I but requires sending messages using networking. This may not seem like a huge issue until you notice everything has to be serializable and e.g. subscribing multiple methods is extra painful.</li> <li>Faster. There is very likely to be some kind of overlap in the libraries used by the Reloaded Loader DLL and the mods. Provided that loading mods without re-JIT'ing code proves possible with the use of <code>AppDomain</code>'s <code>LoaderOptimization</code> options. </li> <li>In the very worst case, Reflection is faster than Dll Injection + Reflection, with additional time also saved not connecting and starting a local server.</li> <li>See Reloaded I - Disadvantages </li> </ul>"},{"location":"Reloaded-vs-Reloaded-II/#disadvantages_1","title":"Disadvantages","text":"<ul> <li>See Reloaded I - Advantages.</li> </ul>"},{"location":"Troubleshooting/","title":"Troubleshooting","text":""},{"location":"Troubleshooting/#debugging-bug-cs7069-reference-to-type-claims-it-is-defined-in-but-it-could-not-be-found","title":"Debugging Bug: CS7069: Reference to type \u2018...\u2019 claims it is defined in \u2018...\u2019, but it could not be found.","text":"<p>This is a bug of the Visual Studio Debugger, for more information, please look at and upvote this issue..</p> <p>If you are a developer, you may encounter this issue if you run multiple mods which use different versions of the same DLL in their build output.  At the moment, it seems Visual Studio cannot differentiate the assembly used by your mod's \"AssemblyLoadContext\"; and will always assume the first assembly with matching name is in use.</p>"},{"location":"Troubleshooting/#workaround","title":"Workaround","text":"<p>May not work if your mod has dependencies which use the same DLL but worth a try.</p> <ul> <li>Open <code>%appdata%/Reloaded-Mod-Loader-II/ReloadedII.json</code> in a text editor.</li> <li>Set <code>LoadModsInParallel</code> to <code>false</code>.</li> <li>Drag and drop your mod to the top of the mod list so it gets loaded first.</li> </ul>"},{"location":"CheatSheet/CallingHookingGameFunctions/","title":"Calling Game Functions","text":"<p>In the modern day, there exist multiple ways to call game functions from C#. In this part of the cheat sheet, we're going to focus on the most common way of calling game functions; that is through <code>Reloaded.Hooks</code>.</p> <p>Reloaded.Hooks is an advanced, general purpose library for manipulating native functions in memory. It was specifically created as part of the Reloaded Project towards the journey to Reloaded-II.  </p> <p>This page serves as an introduction to <code>Reloaded.Hooks</code> there are more features to the library than detailed here, consider visiting the full documentation here. </p> <p>Additional Resources: - Reloaded.Hooks Wiki - What is Reloaded.Hooks </p>"},{"location":"CheatSheet/CallingHookingGameFunctions/#where-to-find-reloadedhooks","title":"Where to Find Reloaded.Hooks","text":"<p>Reloaded.Hooks comes preconfigured out of the box as part of the mod template, so you don't need to do anything special to use it.</p> <pre><code>// From the mod template.\npublic Mod(IReloadedHooks hooks, ILogger logger)\n{\n// IReloadedHooks: It's right here!!\n}\n</code></pre>"},{"location":"CheatSheet/CallingHookingGameFunctions/#defining-game-functions","title":"Defining Game Functions","text":"<p>Calling, hooking and performing other operations with native functions with Reloaded.Hooks is performed through the use of delegates. Delegates should be with Reloaded's <code>FunctionAttribute</code>.  </p> <pre><code>// RenderWare Graphics: This function is usually step one to widescreen hacks :)\n[Function(CallingConventions.Cdecl)]\npublic delegate void RwCameraSetViewWindow(ref RWCamera RwCamera, ref RWView view);\n</code></pre> <p>There are two <code>FunctionAttribute(s)</code>, namely <code>X86.FunctionAttribute</code> and <code>X64.FunctionAttribute</code>. Depending on the game you are working with, you may wish to apply one, the other or both.  </p>"},{"location":"CheatSheet/CallingHookingGameFunctions/#advanced-example","title":"Advanced Example","text":"<p>Info</p> <p>In the real world, compilers will often optimise function calls to optimise for performance.  This will often lead to the function using non-standard conventions, such as accepting parameters via registers where normally the stack should be used.  </p> <p>This is more common in x86 (32-bit) games rather than x64 games.  </p> <p>Reloaded.Hooks allows for mapping parameters to given registers.  </p> <pre><code>/// &lt;summary&gt;\n/// Reads a ANM/HAnim stream from a .ONE archive. Returns address of a decompressed ANM file.\n/// &lt;/summary&gt;\n/// &lt;param name=\"fileIndex\"&gt;[EAX] The index of the file inside the .ONE archive (starting with 2)&lt;/param&gt;\n/// &lt;param name=\"addressToDecompressTo\"&gt;[ECX] The address to which the file inside the ONE archive will be decompressed to.&lt;/param&gt;\n/// &lt;param name=\"thisPointer\"&gt;\"This\" pointer for the ONEFILE class instance.&lt;/param&gt;\n/// &lt;returns&gt;The address containing the read in ANM (RenderWare Hierarchical Animation) stream.&lt;/returns&gt;\n[Function(new[] { Register.eax, Register.ecx }, Register.eax, StackCleanup.Callee)]\npublic delegate void* OneFileLoadHAnimation(int fileIndex, void* addressToDecompressTo, ref ONEFILE thisPointer);\n/* Lifted from a disassembly of Sonic Heroes */\n</code></pre> <p>The defined function has the following properties: -  Two parameters (left to right) in registers EAX and ECX. -  Return register of EAX. -  \"Callee\" stack cleanup.  </p> <p>In most non-Reloaded environments (e.g. C++ with <code>MinHook</code>) you'd usually write some custom inline assembly code to glue together your code and the optimised native function. This is not necessary here. </p>"},{"location":"CheatSheet/CallingHookingGameFunctions/#deciphering-the-function-signature","title":"Deciphering the Function Signature","text":"<p>Info</p> <p>Some disassemblers may contain useful information about how the function is called. Below is guidance on deciphering the function signatures in some common disassemblers.  </p> <p>Please note that disassemblers are not perfect; they can and will sometimes make mistakes.</p> <p>IDA Pro (Decompiler): <pre><code>// Example\nvoid* __userpurge OneFileLoadHAnimation@&lt;eax&gt;(RwUInt32 type@&lt;eax&gt;, void *dest@&lt;ecx&gt;, ONEFILE *this)\n\n// Breakdown\nFUNCTION_NAME@&lt;eax&gt; in function name specifies return register is EAX.\ntype@&lt;eax&gt; specifies the `type` argument is passed via EAX register.\ndest@&lt;ecx&gt; specifies the `dest` argument is passed via ECX register.\nremaining parameters are passed via stack.\n\n// Extra Info (IDA Specific)\n_userpurge == 'Callee' Stack Cleanup\n_usercall == 'Caller' Stack Cleanup\n</code></pre></p> <p>Ghidra: </p> <p>Right click function name and click <code>Edit Function</code>. Inside the dialog, you will find the following:  </p> <p> </p> <p>Note: Ghidra did not disassemble this correctly; I manually fixed this function for this example.  </p> <p>Binary Ninja:</p> <p>This one is pretty self explanatory.  </p> <pre><code>// Example\nvoid* __stdcall OneFileLoadHAnimation(int32_t arg1 @ eax, char* arg2 @ ecx, char* arg3)\n</code></pre> <p>General: Some disassemblers might not provide information on return registers and/or stack cleanup because they are implied by the given convention (such as <code>__stdcall</code>). Consider using the following presets in <code>Reloaded.Hooks</code> to determine these settings.  </p> <ul> <li>X86 Calling Conventions (Presets)</li> <li>X64 Calling Conventions (Presets)</li> </ul>"},{"location":"CheatSheet/CallingHookingGameFunctions/#calling-functions","title":"Calling Functions","text":"<p>To call the game function(s), create a delegate by calling <code>IReloadedHooks'</code> <code>CreateWrapper&lt;T&gt;</code> function.  </p> <pre><code>// 0x0064AC80 is the address of function in native memory.  \nvar rwCameraSetViewWindow = hooks.CreateWrapper&lt;RwCameraSetViewWindow&gt;(0x0064AC80);\n\n// You may now call the delegate instance/native/game fuction like if it was your own.  \nrwCameraSetViewWindow(camera, view);\n</code></pre>"},{"location":"CheatSheet/CallingHookingGameFunctions/#hooking-functions","title":"Hooking Functions","text":"<p>Danger</p> <p>When you create the hook, you MUST store the returned <code>IHook&lt;T&gt;</code> in a place  where it will not be garbage collected. </p> <p>Usually a class field is sufficient, otherwise use a static list/variable.  </p> <p>Function hooking/calling/trampolining is performed by calling the <code>IReloadedHooks</code> <code>CreateHook&lt;T&gt;</code> function.  </p> <pre><code>private IHook&lt;CreateFileA&gt; _createFileAHook; /* Constructor */\npublic SomeClass(IReloadedHooks hooks)\n{\n// Get Address of Windows API function.\nvar createFileAPointer = GetProcAddress(LoadLibraryW(\"kernel32\"), \"CreateFileA\");  // Create the hook (don't forget to call Activate()).\n_createFileAHook = hooks.CreateHook&lt;CreateFileA&gt;(CreateFileAImpl, (long)createFileAPointer).Activate();\n}\n\n/* Hook Function */\nprivate static IntPtr CreateFileAImpl(string filename, FileAccess access, FileShare share, IntPtr securityAttributes, FileMode creationDisposition, FileAttributes flagsAndAttributes, IntPtr templateFile)\n{\n// Filter out non-files such as HID devices, print rest to console\nif (!filename.StartsWith(@\"\\\\?\\\"))\nConsole.WriteLine($\"Opening File {filename}\");\n\n// Code above this comment is executed before the original Windows API code.\nvar returnValue = _createFileAHook.OriginalFunction(filename, access, share, securityAttributes, creationDisposition, flagsAndAttributes, templateFile);\n// Code under this comment is executed after the original Windows API code.\n\nreturn returnValue;\n}\n</code></pre>"},{"location":"CheatSheet/CallingHookingGameFunctions/#ifunctiont","title":"IFunction&lt;T&gt;","text":"<p>Worth noting due to its usefulness, <code>Function&lt;T&gt;</code> is a commonly used API that wraps a native function given a pointer and instance of <code>IReloadedHooks</code>.  </p> <p>Usage:  <pre><code>_addFunction = new Function&lt;Calculator.AddFunction&gt;(functionAddress, hooks);\n\n// With this class you can easily perform common operations, for example...\n// Hook Function\n_addHook = _addFunction.Hook(Hookfunction).Activate();\n\n// Call Function\n_addFunction.GetWrapper()(x, y);\n</code></pre></p> <p>This library is useful when you are e.g. building a library for others to use for hacking a specific game.  </p>"},{"location":"CheatSheet/MemoryManipulation/","title":"Memory Manipulation","text":"<p>Warning</p> <p>The <code>Cheat Sheet</code> is a work in progress. If you think it can be improved, please message me or contribute to the wiki.  </p> <p>Info</p> <p>The goal of the <code>Cheat Sheet</code> is to provide information to help you work within a Reloaded environment. It is not a game hacking/reverse engineering guide, but rather a way to help you if you are unfamiliar working with C# or Reloaded.  </p> <p>This page provides various common use case examples of memory manipulation with Reloaded.  </p>"},{"location":"CheatSheet/MemoryManipulation/#using-pointers","title":"Using Pointers","text":"<p>Info</p> <p>When using pointers in C#, you must use the <code>unsafe</code> keyword, which you can apply to a class, method or block of code.</p> <p>Classic and the most commonly known method of manipulating memory, C style pointers.</p> <pre><code>public unsafe void PointerExample()\n{\nint* ptr = (int*)0xA0B8C0;\n\n// Set 32-bit value at 0xA0B8C0 to 1.\n*ptr = 1;\n\n// Read back the value from 0xA0B8C0\nint value = *ptr;\n}\n</code></pre>"},{"location":"CheatSheet/MemoryManipulation/#using-structs","title":"Using Structs","text":"<p>Pointer arithmetic is also possible with structs in C#.  </p> <pre><code>public struct Point\n{\npublic float X;\npublic float Y;\n}\n\npublic unsafe void PointerStructExample()\n{\nvar ptr = (Point*)0xA0B8C0;\n\n// Set X coordinate to 2000.0f\nptr-&gt;X = 2000.0f;\n}\n</code></pre>"},{"location":"CheatSheet/MemoryManipulation/#using-structs-custom-offsets","title":"Using Structs (Custom Offsets)","text":"<p>C# allows you to set custom offsets for fields inside structs.  </p> <pre><code>[StructLayout(LayoutKind.Explicit)]\npublic struct Player\n{\n[FieldOffset(0x24)]\npublic byte State;\n\n[FieldOffset(0x100)]\npublic Vector3 Position;\n}\n</code></pre> <p>There is no need to insert dummy values as you might need to do in other languages. These structs work fine with pointers and other C# functionality.  </p>"},{"location":"CheatSheet/MemoryManipulation/#aslr","title":"ASLR","text":"<p>Although rarely, some games might use ASLR (Address Space Layout Randomization) to randomize the address where the contents of the game's executable is loaded in memory.  </p> <p>To get the base address of the EXE in memory, use <code>Process.GetCurrentProcess().MainModule.BaseAddress</code>.</p> <pre><code>// baseAddress: location where the 1st byte of the EXE resides in memory\nvar baseAddress = (long) Process.GetCurrentProcess().MainModule.BaseAddress;\nvar functionAddress = baseAddress + 0x4D6920;\n</code></pre> <p>When you see, for example <code>Tsonic_win.exe+4D6920</code> in a tool like Cheat Engine, it really means means <code>baseAddress + 0x4D6920</code>.  </p>"},{"location":"CheatSheet/MemoryManipulation/#using-the-reloadedmemory-library","title":"Using the Reloaded.Memory Library","text":"<p>Info</p> <p>The following examples make use of the Reloaded.Memory NuGet library.  </p> <p>If you are unfamiliar with NuGet, please use one of the following guides: - Commandline (dotnet) - Visual Studio - Rider</p> <p>Below are some common <code>Reloaded.Memory</code> use cases related to Memory Manipulation, for more utilities, please consult the Reloaded.Memory documentation.</p>"},{"location":"CheatSheet/MemoryManipulation/#simple-memory-readwrite","title":"Simple Memory Read/Write","text":"<pre><code>public void ReloadedMemoryExample()\n{\nvar memory = Memory.Instance; // in Reloaded.Memory.Sources\n\n// Set 32-bit value at 0xA0B8C0 to 1.\nmemory.Write(0xA0B8C0, 1);\n\n// Read back the value from 0xA0B8C0\nint value = memory.Read&lt;int&gt;(0xA0B8C0);\n}\n</code></pre>"},{"location":"CheatSheet/MemoryManipulation/#protected-memory-regions","title":"Protected Memory Regions","text":"<p>Sometimes, sections of memory may be protected such that writing to them using or the regular <code>Write</code> methods will cause an error. When this happens you will usually see an error that looks like <code>Access Violation (0xC0000005)</code>.  </p> <p>This usually happens when you make attempts to directly overwrite game code. <code>Reloaded.Memory</code> provides a workaround for this.  </p> <pre><code>public void ReloadedMemorySafeWrite()\n{\n// SafeWrite will change memory permissions, \n// write your value and restore the original permissions\nMemory.Instance.SafeWrite(0xA0B8C0, 1);\n}\n</code></pre> <p>Alternatively, you can use <code>ChangePermission</code> to change the permissions and never bother with them again.  </p> <pre><code>public void ReloadedMemoryChangePermissions()\n{\nvar value  = 1;\nvar memory = Memory.Instance;\n\n// Change the permissions so this region of memory is writable.\nmemory.ChangePermission((IntPtr)0xA0B8C0, ref value, Kernel32.MEM_PROTECTION.PAGE_EXECUTE_READWRITE);\n\n// You can now write to the memory as usual.\nmemory.Write(0xA0B8C0, value);\n}\n</code></pre>"},{"location":"CheatSheet/MemoryManipulation/#pointers-by-reference","title":"Pointers by Reference","text":"<p>The <code>RefPointer&lt;T&gt;</code> class can be used to convert pointers to references.  </p> <pre><code>public unsafe void RefPointerExample()\n{\nref int value = ref RefPointer&lt;int&gt;.Create(0xA0B8C0);\nvalue = 1;        // Write to 0xA0B8C0\nint copy = value; // Read from 0xA0B8C0\n}\n</code></pre>"},{"location":"CheatSheet/MemoryManipulation/#fixed-array-pointers","title":"Fixed Array Pointers","text":"<p>The <code>FixedArrayPointer&lt;T&gt;</code> struct is also worth a mention, as it implements the necessary interfaces to make use of features such as LINQ.</p> <pre><code>// Assume 0xA0B8C0 contains an array of character physics (struct) in some game.\n// Assume there are 16 characters.\nvar characterPhysicsArray = new FixedArrayPtr&lt;CharacterPhysics&gt;((ulong)0xA0B8C0, 16);\n\n// Calculating min, max, average air acceleration using LINQ\nfloat minAccel = characterPhysicsArray.Min(physics =&gt; physics.AirAcceleration);\nfloat maxAccel = characterPhysicsArray.Max(physics =&gt; physics.AirAcceleration); float averageAccel = characterPhysicsArray.Average(physics =&gt; physics.AirAcceleration);\n</code></pre>"},{"location":"CheatSheet/MemoryManipulation/#memory-marshalling-example","title":"Memory Marshalling Example","text":"<p>\"Marshalling\" is another feature supported in <code>Reloaded.Memory</code> when reading or writing data. Marshalling is the process of converting between a C# object and a C struct or C++ class. The following example reads a struct, which contains a string with fixed length.  </p> <pre><code>public struct CustomFileHeader\n{\n/// &lt;summary&gt;\n/// Contains the actual filename of the file as ASCII encoded bytes.\n/// Stored as fixed size of 32 bytes, no null terminator.\n/// &lt;/summary&gt;\n[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]\npublic string Name;\n\npublic uint Offset;\npublic uint Length;\n}\n\nprivate static void MarshallingExample()\n{\nvar memory = Memory.Instance;\n\n// Read. \nmemory.Read&lt;CustomFileHeader&gt;(memoryLocation, out var header, true); // true to enable marshalling\n\n// Change the name (make sure less than 32 characters)\nheader.Name = \"CoolNewHeaderName\";\n\n// Write it back\nmemory.Write(memoryLocation, customHeader);\n}\n</code></pre>"},{"location":"CheatSheet/ReloadedIIApi/","title":"Reloaded API","text":"<p>Reloaded-II provides a simple, easy to use API that can be used for receiving various events from the mod loader, query status of other mods and perform some common operations such as logging.  </p>"},{"location":"CheatSheet/ReloadedIIApi/#where-to-find-the-api","title":"Where to find the API.","text":"<p>In the mod template, have a look at <code>Program.cs</code>. When your mod first executes at startup, Reloaded will call the <code>Start</code> (or <code>StartEx</code>) method.  </p> <p>You should subscribe to any events that you want to receive from Reloaded-II in this method.  </p> <pre><code>public void StartEx(IModLoaderV1 loaderApi, IModConfigV1 modConfig)\n{\n// Previous code omitted..\n// From template\n_mod = new Mod(_hooks, _logger);\n\n// Ideally here, at the end of the method.\n}\n</code></pre>"},{"location":"CheatSheet/ReloadedIIApi/#some-common-api-events","title":"Some Common API Events","text":"<pre><code>// Subscribing to events from `StartEx` method.\npublic void StartEx(IModLoaderV1 loaderApi, IModConfigV1 modConfig)\n{\n// Prior code omitted from this secion...\nvar configFolder = _modLoader.GetModConfigDirectory(modConfig.ModId);\n_modLoader.OnModLoaderInitialized += OnModLoaderInitialized;\n_modLoader.ModUnloading += ModUnloading;\n_modLoader.ModLoading += OnModLoading;\n_modLoader.ModLoaded += OnModLoaded;\n}\n\n// Called when all the mods have been loaded at startup.\nprivate void OnModLoaderInitialized() { }\n\n// Called right before a mod is unloaded.\nprivate void ModUnloading(IModV1 mod, IModConfigV1 config) { }\n\n// Called right before a mod is loaded.\nprivate void OnModLoading(IModV1 mod, IModConfigV1 config) { }\n\n// Called after a mod is loaded\nprivate void OnModLoaded(IModV1 mod, IModConfigV1 config) { }\n</code></pre> <p>When consuming events, the parameters passed to the event handlers contain the oldest available versions of each interface. To use the newest available version, simply cast the interface.</p> <pre><code>var newMod = (IMod) mod\n</code></pre> <p>Newest versions have no version suffix, so for <code>IModConfigV1</code> you should cast to <code>IModConfig</code> and for <code>IModV1</code> you should cast to <code>IMod</code> etc.</p>"},{"location":"CheatSheet/ReloadedIIApi/#logging-api","title":"Logging API","text":"<p>Reloaded-II provides a logging API; which you can use to log messages to the console and the log file.  </p> <p>Example: <pre><code>_logger.WriteLineAsync(\"Hello World\");\n</code></pre></p>"},{"location":"CheatSheet/ReloadedIIApi/#asynchronous-logging","title":"Asynchronous Logging","text":"<p>If you need to very frequently log messages, it is recommended to use the asynchronous logging API instead.  </p> <pre><code>_logger.WriteLineAsync(\"Async Hello World\");\n</code></pre> <p>Calling this method will add the message to a queue. This queue is handled by a background thread; so the method will return immediately instead of stalling the application.  </p>"},{"location":"CheatSheet/ReloadedIIApi/#events","title":"Events","text":"<p>The logger exposes some events, such as for intercepting logged messages. </p> <pre><code>_logger.OnWriteLine += LoggerOnOnWriteLine;\n\nprivate void OnWriteLine(object? sender, (string text, Color color) e)\n{\n/* Do something with new line. */\n}\n</code></pre> <p>This can be useful if you would like to e.g. display the log in-game. </p>"},{"location":"CheatSheet/SignatureScanning/","title":"Signature Scanning","text":"<p>Info</p> <p>This page provides the basic essential background knowledge about signature scanning to spread awareness. This technique is often underutilised by new and upcoming communities; games get updated and on some services, it's not possible to downgrade.  </p> <p>Please remember that the Cheat Sheet is not a game hacking guide.  </p> <p>Modifying applications which get frequent updates can become very challenging. Every update shuffles around everything in the executables: functions, variables etc. Many other mods that don't use signature scanning for maintained games break instantly every update.  </p> <p>This can be avoided with a technique called <code>signature scanning</code>.  </p>"},{"location":"CheatSheet/SignatureScanning/#about-signature-scanning","title":"About Signature Scanning","text":"<p>Signature Scanning is all about scanning memory to find a known sequence of bytes which matches a sequence of bytes you have previously identified (e.g. bytes at start of a function). That's it. </p> <p>Most common use cases for signature scanning: - Scanning for the start of a function. - Scanning for the code that accesses a variable.  </p> <p>When doing Sigscanning, you should be looking for <code>CODE</code> and NOT <code>DATA</code>. You look for assembly instructions, such as <code>mov eax, [ecx]</code>. If you want to find e.g. the <code>money</code> variable, you scan for the code that accesses that address.  </p>"},{"location":"CheatSheet/SignatureScanning/#creating-signatures","title":"Creating Signatures","text":"<p>An example signature for getting address to <code>levelId</code> variable in a game.  </p> <pre><code>// Signature: 89 15 [?? ?? ?? ??] EB ?? A3 ?? ?? ?? ??  \n// LevelId  : Found Address of Signature + 2 (See brackets)  \n\n// Instruction              // Bytes\nmov levelId, edx            // 89 15 [?? ?? ?? ??] &lt;= Level ID | \njmp loc_4354A1              // EB ??\nmov someOtherVariable, eax  // A3 ?? ?? ?? ??\n</code></pre> <p>When you are creating a signature, you want to exclude parts of the code that are likely to change between different versions of the game. This includes items such as <code>variable addresses</code> and <code>jmp targets</code>.  </p> <p>In the above example, these bytes are marked as <code>??</code> and the signature scanner will accept any value in that position as valid.  </p>"},{"location":"CheatSheet/SignatureScanning/#viewing-bytes-corresponding-to-instructions","title":"Viewing bytes corresponding to instructions:","text":"<ul> <li>IDA: <code>Options</code> -&gt; <code>General</code> -&gt; <code>Number of Opcode Bytes</code></li> <li>Ghidra: Ghidra shows bytes by default. </li> <li>Binary Ninja (Cloud): Press dropdown for current tab and check <code>Show Bytes</code>.</li> </ul>"},{"location":"CheatSheet/SignatureScanning/#hints-on-generating-signatures-by-hand","title":"Hints on generating signatures by hand","text":"<p>Help</p> <p>The guidance here could be better.  </p> <p>It's generally recommended to automate this process using existing scripts, however if you want to do this by hand; here is a bit of guidance: - You can generally tell by just seeing the desired address/offset right there in the bytes. - Using x86 instruction set reference can be useful to separate the instruction from operands. - Copy the code to an assembler like FASM, change operand, see which bytes change. - Ghidra Specific: <code>Right Click</code> -&gt; <code>Instruction Info</code> -&gt; See: <code>Operand Mask</code>.  </p>"},{"location":"CheatSheet/SignatureScanning/#tool-sigmaker-for-ida","title":"Tool: SigMaker for IDA","text":"<p>Help</p> <p>There exist more tools for creating signatures out there. If you are experienced with any of them, consider contributing to the wiki.  </p> <p>You can find SigMaker here. To install simply drop the plugin into the <code>plugins</code> directory. You can then access <code>SigMaker</code> via <code>Edit -&gt; Plugins -&gt; SigMaker</code> or by pressing <code>Ctrl + Alt + S</code>. </p> <p>A successfully found signature looks like <code>E8 ? ? ? ? 5B 5E 83 C4 18</code> and will be printed in the <code>Output</code> window.  </p>"},{"location":"CheatSheet/SignatureScanning/#direct-signature-to-code","title":"Direct Signature to Code","text":"<p>The following method can be used to generate a signature that when scanned, will give the exact address of the code you are looking for.  </p> <ul> <li>Highlight a line of code.  </li> <li>Generate a signature. (<code>Ctrl + Alt + S</code> -&gt; <code>Create IDA Pattern from Selection</code>).  </li> <li>Test the pattern. (<code>Ctrl + Alt + S</code> -&gt; <code>Test IDA Pattern</code>).  </li> <li>If there is more than 1 result, highlight 1 more line of assembly and repeat the process until there is only 1 result.  </li> <li>Use this signature.  </li> </ul> <p>This generally generates longer signatures than <code>Auto Create Pattern</code>, but these signatures should be safer for cases where you are generating signatures for code in the middle of a function.  </p>"},{"location":"CheatSheet/SignatureScanning/#auto-create-pattern","title":"Auto Create Pattern","text":"<p>If you decide to instead use <code>Auto Create Pattern</code> to generate the signature, you might receive an output that looks like this:  </p> <pre><code>direct reference: [actual address in first opcode] E8 ? ? ? ? 5B 5E 83 C4 18\n</code></pre> <p>And if you scan for the pattern, you might find yourself at a different address. <pre><code>0060913F 024 E8 [7C 13 00 00]   call ChangeStrategyMode // &lt;= Here \n00609144 024 5B                 pop  ebx\n</code></pre></p> <p><code>Auto-create pattern</code> will often generate a pattern to some code that <code>call</code>(s) the function you are looking for. In order to convert this to the actual function address at runtime, you will need to do the following.  </p> <ul> <li>Extract the relative address [shown in brackets] from the <code>call instruction</code> (in this case bytes 0x7C130000).  </li> <li>Add this relative address to address of next instruction.  </li> </ul> <pre><code>// Reference C# code to do this:  \n// instructionAddress: Address of found signature in RAM.  \n// instructionLength: Length of the instruction.\nunsafe byte* CallInstructionToAbsoluteAddress(byte* instructionAddress, int instructionLength)\n{\nvar nextInstructionAddress = instructionAddress + instructionLength;\nvar offset = *(instructionAddress + 1); // extract [ 7C 13 00 00 ]\nreturn (nextInstructionAddress + offset);\n}\n</code></pre> <p>If the signature scan result says <code>sig to containing function</code>, add the number in brackets to your result. </p>"},{"location":"CheatSheet/SignatureScanning/#tool-makesig-for-ghidra","title":"Tool: MakeSig For Ghidra","text":"<p>You can find MakeSig here.  </p> <p>To install simply drop <code>makesig.py</code> into your <code>ghidra_scripts</code> directory.  </p> <p>If you do not know where this directory is, you can check in <code>Window -&gt; Script Manager</code> (or using the Script Manager button in the toolbar) then <code>Right Click -&gt; Script Directories</code>.  </p> <p>The default directory is <code>~/ghidra_scripts</code> although in this window you can add another directory where scripts will be searched for.  </p> <p>With the script installed you can then use it from the <code>Script Manager</code> window by searching for <code>makesig</code> and double clicking it. You can also assign a keyboard shortcut to run the script by <code>Right Click -&gt; Assign Key Binding</code>. After running it once you can also rerun it with <code>Ctrl + Shift + R</code> or using the rerun button at the end of the toolbar.  </p> <p>When running the script you can either create a signature for the start of the function or the currently selected instruction, the found signature such as <code>E8 ?? ?? ?? ?? 8B 45 ?? 89 47</code> will be printed to the console.</p>"},{"location":"CheatSheet/SignatureScanning/#searching-for-signatures","title":"Searching for Signatures","text":"<p>Info</p> <p>The following example makes use of the Reloaded.Memory.SigScan NuGet library. You can find its documentation here.  </p> <p>The following is an example of how you would search for the signature in the <code>Creating Signatures</code> section above:  </p> <pre><code>// Initialize the scanner.\nvar thisProcess = Process.GetCurrentProcess();\nvar baseAddress = thisProcess.MainModule.BaseAddress;\nvar exeSize     = thisProcess.MainModule.ModuleMemorySize;\nusing var scanner = new Scanner((byte*)baseAddress, exeSize);\n\n// Search for a given pattern\n// Note: If created signature using SigMaker, replace ? with ??.\nvar result = scanner.FindPattern(\"89 15 ?? ?? ?? ?? EB ?? A3 ?? ?? ?? ??\");\nif (!result.Found)\nthrow new Exception(\"Signature for getting LevelId not found.\");\n\n// Address of `mov levelId, edx`\nvar codeAddress = baseAddress + result.Offset;\n\n// Address of `levelId` (skip 89 15)\nvar levelIdPointer = (int**)(codeAddress + 2);\n\n// Get address of 'levelId' in memory.\nint* levelId = *levelIdPointer;\n</code></pre>"},{"location":"CheatSheet/SignatureScanning/#additional-resources","title":"Additional Resources","text":"<ul> <li>Guided Hacking: Pattern Scanning Guide </li> <li>AlliedMods: Pattern Scanning </li> <li>Reloaded Wiki </li> </ul>"}]}